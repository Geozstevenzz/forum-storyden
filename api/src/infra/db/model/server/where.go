// Code generated by entc, DO NOT EDIT.

package server

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/api/src/infra/db/model/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// Hn applies equality check predicate on the "hn" field. It's identical to HnEQ.
func Hn(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHn), v))
	})
}

// Pc applies equality check predicate on the "pc" field. It's identical to PcEQ.
func Pc(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPc), v))
	})
}

// Pm applies equality check predicate on the "pm" field. It's identical to PmEQ.
func Pm(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPm), v))
	})
}

// Gm applies equality check predicate on the "gm" field. It's identical to GmEQ.
func Gm(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGm), v))
	})
}

// La applies equality check predicate on the "la" field. It's identical to LaEQ.
func La(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLa), v))
	})
}

// Pa applies equality check predicate on the "pa" field. It's identical to PaEQ.
func Pa(v bool) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPa), v))
	})
}

// Vn applies equality check predicate on the "vn" field. It's identical to VnEQ.
func Vn(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVn), v))
	})
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomain), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Banner applies equality check predicate on the "banner" field. It's identical to BannerEQ.
func Banner(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBanner), v))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deletedAt" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIP), v))
	})
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIP), v...))
	})
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIP), v...))
	})
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIP), v))
	})
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIP), v))
	})
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIP), v))
	})
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIP), v))
	})
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIP), v))
	})
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIP), v))
	})
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIP), v))
	})
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIP), v))
	})
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIP), v))
	})
}

// HnEQ applies the EQ predicate on the "hn" field.
func HnEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHn), v))
	})
}

// HnNEQ applies the NEQ predicate on the "hn" field.
func HnNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHn), v))
	})
}

// HnIn applies the In predicate on the "hn" field.
func HnIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHn), v...))
	})
}

// HnNotIn applies the NotIn predicate on the "hn" field.
func HnNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHn), v...))
	})
}

// HnGT applies the GT predicate on the "hn" field.
func HnGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHn), v))
	})
}

// HnGTE applies the GTE predicate on the "hn" field.
func HnGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHn), v))
	})
}

// HnLT applies the LT predicate on the "hn" field.
func HnLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHn), v))
	})
}

// HnLTE applies the LTE predicate on the "hn" field.
func HnLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHn), v))
	})
}

// HnContains applies the Contains predicate on the "hn" field.
func HnContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHn), v))
	})
}

// HnHasPrefix applies the HasPrefix predicate on the "hn" field.
func HnHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHn), v))
	})
}

// HnHasSuffix applies the HasSuffix predicate on the "hn" field.
func HnHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHn), v))
	})
}

// HnEqualFold applies the EqualFold predicate on the "hn" field.
func HnEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHn), v))
	})
}

// HnContainsFold applies the ContainsFold predicate on the "hn" field.
func HnContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHn), v))
	})
}

// PcEQ applies the EQ predicate on the "pc" field.
func PcEQ(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPc), v))
	})
}

// PcNEQ applies the NEQ predicate on the "pc" field.
func PcNEQ(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPc), v))
	})
}

// PcIn applies the In predicate on the "pc" field.
func PcIn(vs ...int) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPc), v...))
	})
}

// PcNotIn applies the NotIn predicate on the "pc" field.
func PcNotIn(vs ...int) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPc), v...))
	})
}

// PcGT applies the GT predicate on the "pc" field.
func PcGT(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPc), v))
	})
}

// PcGTE applies the GTE predicate on the "pc" field.
func PcGTE(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPc), v))
	})
}

// PcLT applies the LT predicate on the "pc" field.
func PcLT(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPc), v))
	})
}

// PcLTE applies the LTE predicate on the "pc" field.
func PcLTE(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPc), v))
	})
}

// PmEQ applies the EQ predicate on the "pm" field.
func PmEQ(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPm), v))
	})
}

// PmNEQ applies the NEQ predicate on the "pm" field.
func PmNEQ(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPm), v))
	})
}

// PmIn applies the In predicate on the "pm" field.
func PmIn(vs ...int) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPm), v...))
	})
}

// PmNotIn applies the NotIn predicate on the "pm" field.
func PmNotIn(vs ...int) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPm), v...))
	})
}

// PmGT applies the GT predicate on the "pm" field.
func PmGT(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPm), v))
	})
}

// PmGTE applies the GTE predicate on the "pm" field.
func PmGTE(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPm), v))
	})
}

// PmLT applies the LT predicate on the "pm" field.
func PmLT(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPm), v))
	})
}

// PmLTE applies the LTE predicate on the "pm" field.
func PmLTE(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPm), v))
	})
}

// GmEQ applies the EQ predicate on the "gm" field.
func GmEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGm), v))
	})
}

// GmNEQ applies the NEQ predicate on the "gm" field.
func GmNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGm), v))
	})
}

// GmIn applies the In predicate on the "gm" field.
func GmIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGm), v...))
	})
}

// GmNotIn applies the NotIn predicate on the "gm" field.
func GmNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGm), v...))
	})
}

// GmGT applies the GT predicate on the "gm" field.
func GmGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGm), v))
	})
}

// GmGTE applies the GTE predicate on the "gm" field.
func GmGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGm), v))
	})
}

// GmLT applies the LT predicate on the "gm" field.
func GmLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGm), v))
	})
}

// GmLTE applies the LTE predicate on the "gm" field.
func GmLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGm), v))
	})
}

// GmContains applies the Contains predicate on the "gm" field.
func GmContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGm), v))
	})
}

// GmHasPrefix applies the HasPrefix predicate on the "gm" field.
func GmHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGm), v))
	})
}

// GmHasSuffix applies the HasSuffix predicate on the "gm" field.
func GmHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGm), v))
	})
}

// GmEqualFold applies the EqualFold predicate on the "gm" field.
func GmEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGm), v))
	})
}

// GmContainsFold applies the ContainsFold predicate on the "gm" field.
func GmContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGm), v))
	})
}

// LaEQ applies the EQ predicate on the "la" field.
func LaEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLa), v))
	})
}

// LaNEQ applies the NEQ predicate on the "la" field.
func LaNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLa), v))
	})
}

// LaIn applies the In predicate on the "la" field.
func LaIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLa), v...))
	})
}

// LaNotIn applies the NotIn predicate on the "la" field.
func LaNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLa), v...))
	})
}

// LaGT applies the GT predicate on the "la" field.
func LaGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLa), v))
	})
}

// LaGTE applies the GTE predicate on the "la" field.
func LaGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLa), v))
	})
}

// LaLT applies the LT predicate on the "la" field.
func LaLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLa), v))
	})
}

// LaLTE applies the LTE predicate on the "la" field.
func LaLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLa), v))
	})
}

// LaContains applies the Contains predicate on the "la" field.
func LaContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLa), v))
	})
}

// LaHasPrefix applies the HasPrefix predicate on the "la" field.
func LaHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLa), v))
	})
}

// LaHasSuffix applies the HasSuffix predicate on the "la" field.
func LaHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLa), v))
	})
}

// LaEqualFold applies the EqualFold predicate on the "la" field.
func LaEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLa), v))
	})
}

// LaContainsFold applies the ContainsFold predicate on the "la" field.
func LaContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLa), v))
	})
}

// PaEQ applies the EQ predicate on the "pa" field.
func PaEQ(v bool) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPa), v))
	})
}

// PaNEQ applies the NEQ predicate on the "pa" field.
func PaNEQ(v bool) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPa), v))
	})
}

// VnEQ applies the EQ predicate on the "vn" field.
func VnEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVn), v))
	})
}

// VnNEQ applies the NEQ predicate on the "vn" field.
func VnNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVn), v))
	})
}

// VnIn applies the In predicate on the "vn" field.
func VnIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVn), v...))
	})
}

// VnNotIn applies the NotIn predicate on the "vn" field.
func VnNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVn), v...))
	})
}

// VnGT applies the GT predicate on the "vn" field.
func VnGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVn), v))
	})
}

// VnGTE applies the GTE predicate on the "vn" field.
func VnGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVn), v))
	})
}

// VnLT applies the LT predicate on the "vn" field.
func VnLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVn), v))
	})
}

// VnLTE applies the LTE predicate on the "vn" field.
func VnLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVn), v))
	})
}

// VnContains applies the Contains predicate on the "vn" field.
func VnContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVn), v))
	})
}

// VnHasPrefix applies the HasPrefix predicate on the "vn" field.
func VnHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVn), v))
	})
}

// VnHasSuffix applies the HasSuffix predicate on the "vn" field.
func VnHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVn), v))
	})
}

// VnEqualFold applies the EqualFold predicate on the "vn" field.
func VnEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVn), v))
	})
}

// VnContainsFold applies the ContainsFold predicate on the "vn" field.
func VnContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVn), v))
	})
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomain), v))
	})
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDomain), v))
	})
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDomain), v...))
	})
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDomain), v...))
	})
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDomain), v))
	})
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDomain), v))
	})
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDomain), v))
	})
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDomain), v))
	})
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDomain), v))
	})
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDomain), v))
	})
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDomain), v))
	})
}

// DomainIsNil applies the IsNil predicate on the "domain" field.
func DomainIsNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDomain)))
	})
}

// DomainNotNil applies the NotNil predicate on the "domain" field.
func DomainNotNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDomain)))
	})
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDomain), v))
	})
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDomain), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// BannerEQ applies the EQ predicate on the "banner" field.
func BannerEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBanner), v))
	})
}

// BannerNEQ applies the NEQ predicate on the "banner" field.
func BannerNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBanner), v))
	})
}

// BannerIn applies the In predicate on the "banner" field.
func BannerIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBanner), v...))
	})
}

// BannerNotIn applies the NotIn predicate on the "banner" field.
func BannerNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBanner), v...))
	})
}

// BannerGT applies the GT predicate on the "banner" field.
func BannerGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBanner), v))
	})
}

// BannerGTE applies the GTE predicate on the "banner" field.
func BannerGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBanner), v))
	})
}

// BannerLT applies the LT predicate on the "banner" field.
func BannerLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBanner), v))
	})
}

// BannerLTE applies the LTE predicate on the "banner" field.
func BannerLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBanner), v))
	})
}

// BannerContains applies the Contains predicate on the "banner" field.
func BannerContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBanner), v))
	})
}

// BannerHasPrefix applies the HasPrefix predicate on the "banner" field.
func BannerHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBanner), v))
	})
}

// BannerHasSuffix applies the HasSuffix predicate on the "banner" field.
func BannerHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBanner), v))
	})
}

// BannerIsNil applies the IsNil predicate on the "banner" field.
func BannerIsNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBanner)))
	})
}

// BannerNotNil applies the NotNil predicate on the "banner" field.
func BannerNotNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBanner)))
	})
}

// BannerEqualFold applies the EqualFold predicate on the "banner" field.
func BannerEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBanner), v))
	})
}

// BannerContainsFold applies the ContainsFold predicate on the "banner" field.
func BannerContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBanner), v))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserId), v))
	})
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserId), v))
	})
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserId), v))
	})
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserId), v))
	})
}

// UserIdContains applies the Contains predicate on the "userId" field.
func UserIdContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserId), v))
	})
}

// UserIdHasPrefix applies the HasPrefix predicate on the "userId" field.
func UserIdHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserId), v))
	})
}

// UserIdHasSuffix applies the HasSuffix predicate on the "userId" field.
func UserIdHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserId), v))
	})
}

// UserIdIsNil applies the IsNil predicate on the "userId" field.
func UserIdIsNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserId)))
	})
}

// UserIdNotNil applies the NotNil predicate on the "userId" field.
func UserIdNotNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserId)))
	})
}

// UserIdEqualFold applies the EqualFold predicate on the "userId" field.
func UserIdEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserId), v))
	})
}

// UserIdContainsFold applies the ContainsFold predicate on the "userId" field.
func UserIdContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserId), v))
	})
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActive), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deletedAt" field.
func DeletedAtEQ(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deletedAt" field.
func DeletedAtNEQ(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deletedAt" field.
func DeletedAtIn(vs ...time.Time) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deletedAt" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deletedAt" field.
func DeletedAtGT(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deletedAt" field.
func DeletedAtGTE(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deletedAt" field.
func DeletedAtLT(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deletedAt" field.
func DeletedAtLTE(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deletedAt" field.
func DeletedAtIsNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deletedAt" field.
func DeletedAtNotNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// HasRu applies the HasEdge predicate on the "ru" edge.
func HasRu() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RuTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RuTable, RuColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRuWith applies the HasEdge predicate on the "ru" edge with a given conditions (other predicates).
func HasRuWith(preds ...predicate.Rule) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RuInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RuTable, RuColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "User" edge.
func HasUser() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "User" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Server) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Server) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Server) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		p(s.Not())
	})
}
