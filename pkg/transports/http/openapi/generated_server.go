// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220728213615-b9782fb00949 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BrowserScopes = "browser.Scopes"
)

// APIError A description of an error including a human readable message.
type APIError struct {
	Error     string  `json:"error"`
	Message   *string `json:"message,omitempty"`
	Suggested *string `json:"suggested,omitempty"`
}

// Account defines model for Account.
type Account struct {
	Bio       *string `json:"bio,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	Email     *string `json:"email,omitempty"`

	// Id A unique identifier for this resource.
	Id        Identifier `json:"id"`
	Name      *string    `json:"name,omitempty"`
	UpdatedAt *string    `json:"updatedAt,omitempty"`
}

// AuthenticationRequest defines model for AuthenticationRequest.
type AuthenticationRequest struct {
	Identifier string `json:"identifier"`
	Token      string `json:"token"`
}

// AuthenticationSuccess defines model for AuthenticationSuccess.
type AuthenticationSuccess struct {
	Id string `json:"id"`
}

// Category defines model for Category.
type Category struct {
	Admin       *bool   `json:"admin,omitempty"`
	Colour      *string `json:"colour,omitempty"`
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id        *Identifier `json:"id,omitempty"`
	Name      *string     `json:"name,omitempty"`
	PostCount *int        `json:"postCount,omitempty"`
	Sort      *int        `json:"sort,omitempty"`
}

// CommonProperties defines model for CommonProperties.
type CommonProperties struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// Identifier A unique identifier for this resource.
type Identifier = openapi_types.UUID

// ProfileReference A minimal reference to an account.
type ProfileReference struct {
	// Id A unique identifier for this resource.
	Id   *Identifier `json:"id,omitempty"`
	Name *string     `json:"name,omitempty"`
}

// React defines model for React.
type React struct {
	Emoji *string `json:"emoji,omitempty"`

	// Id A unique identifier for this resource.
	Id *Identifier `json:"id,omitempty"`
}

// Thread defines model for Thread.
type Thread struct {
	// Author A minimal reference to an account.
	Author   *ProfileReference `json:"author,omitempty"`
	Category *Category         `json:"category,omitempty"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Pinned Whether the thread is pinned in this category.
	Pinned *bool `json:"pinned,omitempty"`

	// Posts The number of posts under this thread.
	Posts *int `json:"posts,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts *[]React `json:"reacts,omitempty"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A URL friendly slug which is prepended with the post ID
	// for uniqueness and sortability.
	Slug *string `json:"slug,omitempty"`

	// Tags A list of tags associated with the thread.
	Tags *[]string `json:"tags,omitempty"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ThreadSubmission defines model for ThreadSubmission.
type ThreadSubmission struct {
	// Body The markdown body for the new thread.
	Body string `json:"body"`

	// Category A unique identifier for this resource.
	Category Identifier `json:"category"`

	// Tags A list of tags for the new thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`
}

// CreateThreadSuccess defines model for CreateThreadSuccess.
type CreateThreadSuccess = Thread

// GetAccountSuccess defines model for GetAccountSuccess.
type GetAccountSuccess = Account

// InternalServerError A description of an error including a human readable message.
type InternalServerError = APIError

// SigninJSONRequestBody defines body for Signin for application/json ContentType.
type SigninJSONRequestBody = AuthenticationRequest

// SigninFormdataRequestBody defines body for Signin for application/x-www-form-urlencoded ContentType.
type SigninFormdataRequestBody = AuthenticationRequest

// SignupJSONRequestBody defines body for Signup for application/json ContentType.
type SignupJSONRequestBody = AuthenticationRequest

// SignupFormdataRequestBody defines body for Signup for application/x-www-form-urlencoded ContentType.
type SignupFormdataRequestBody = AuthenticationRequest

// CreateThreadJSONRequestBody defines body for CreateThread for application/json ContentType.
type CreateThreadJSONRequestBody = ThreadSubmission

// CreateThreadFormdataRequestBody defines body for CreateThread for application/x-www-form-urlencoded ContentType.
type CreateThreadFormdataRequestBody = ThreadSubmission

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /openapi.json)
	GetSpec(ctx echo.Context) error

	// (GET /v1/accounts/{id})
	GetAccount(ctx echo.Context, id Identifier) error

	// (POST /v1/auth/password/signin)
	Signin(ctx echo.Context) error

	// (POST /v1/auth/password/signup)
	Signup(ctx echo.Context) error

	// (POST /v1/threads)
	CreateThread(ctx echo.Context) error

	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpec(ctx)
	return err
}

// GetAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccount(ctx, id)
	return err
}

// Signin converts echo context to params.
func (w *ServerInterfaceWrapper) Signin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Signin(ctx)
	return err
}

// Signup converts echo context to params.
func (w *ServerInterfaceWrapper) Signup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Signup(ctx)
	return err
}

// CreateThread converts echo context to params.
func (w *ServerInterfaceWrapper) CreateThread(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateThread(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/openapi.json", wrapper.GetSpec)
	router.GET(baseURL+"/v1/accounts/:id", wrapper.GetAccount)
	router.POST(baseURL+"/v1/auth/password/signin", wrapper.Signin)
	router.POST(baseURL+"/v1/auth/password/signup", wrapper.Signup)
	router.POST(baseURL+"/v1/threads", wrapper.CreateThread)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

type AuthenticationSuccessResponseHeaders struct {
	SetCookie string
}
type AuthenticationSuccessJSONResponse struct {
	Body AuthenticationSuccess

	Headers AuthenticationSuccessResponseHeaders
}

func (t AuthenticationSuccessJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type BadRequestResponse struct {
}

type CreateThreadSuccessJSONResponse Thread

func (t CreateThreadSuccessJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((Thread)(t))
}

type GetAccountSuccessJSONResponse Account

func (t GetAccountSuccessJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((Account)(t))
}

type InternalServerErrorJSONResponse APIError

func (t InternalServerErrorJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((APIError)(t))
}

type NotFoundResponse struct {
}

type UnauthorisedResponse struct {
}

type GetSpecRequestObject struct {
}

type GetSpec200TextResponse string

type GetAccountRequestObject struct {
	Id Identifier `json:"id"`
}

type GetAccount200JSONResponse = GetAccountSuccessJSONResponse

type GetAccount401Response = UnauthorisedResponse

type GetAccount404Response = NotFoundResponse

type GetAccountdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t GetAccountdefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type SigninRequestObject struct {
	JSONBody     *SigninJSONRequestBody
	FormdataBody *SigninFormdataRequestBody
}

type Signin200JSONResponse = AuthenticationSuccessJSONResponse

type Signin401Response = UnauthorisedResponse

type Signin404Response = NotFoundResponse

type SignindefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t SignindefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type SignupRequestObject struct {
	JSONBody     *SignupJSONRequestBody
	FormdataBody *SignupFormdataRequestBody
}

type Signup200JSONResponse = AuthenticationSuccessJSONResponse

type Signup400Response = BadRequestResponse

type SignupdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t SignupdefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type CreateThreadRequestObject struct {
	JSONBody     *CreateThreadJSONRequestBody
	FormdataBody *CreateThreadFormdataRequestBody
}

type CreateThread200JSONResponse = CreateThreadSuccessJSONResponse

type CreateThread401Response = UnauthorisedResponse

type CreateThread404Response = NotFoundResponse

type CreateThreaddefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t CreateThreaddefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type GetVersionRequestObject struct {
}

type GetVersion200TextResponse string

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /openapi.json)
	GetSpec(ctx context.Context, request GetSpecRequestObject) interface{}

	// (GET /v1/accounts/{id})
	GetAccount(ctx context.Context, request GetAccountRequestObject) interface{}

	// (POST /v1/auth/password/signin)
	Signin(ctx context.Context, request SigninRequestObject) interface{}

	// (POST /v1/auth/password/signup)
	Signup(ctx context.Context, request SignupRequestObject) interface{}

	// (POST /v1/threads)
	CreateThread(ctx context.Context, request CreateThreadRequestObject) interface{}

	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) interface{}
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) interface{}

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetSpec operation middleware
func (sh *strictHandler) GetSpec(ctx echo.Context) error {
	var request GetSpecRequestObject

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.GetSpec(ctx.Request().Context(), request.(GetSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpec")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case GetSpec200TextResponse:
		return ctx.Blob(200, "text/plain", []byte(v))
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// GetAccount operation middleware
func (sh *strictHandler) GetAccount(ctx echo.Context, id Identifier) error {
	var request GetAccountRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.GetAccount(ctx.Request().Context(), request.(GetAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccount")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case GetAccount200JSONResponse:
		return ctx.JSON(200, v)
	case GetAccount401Response:
		return ctx.NoContent(401)
	case GetAccount404Response:
		return ctx.NoContent(404)
	case GetAccountdefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// Signin operation middleware
func (sh *strictHandler) Signin(ctx echo.Context) error {
	var request SigninRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body SigninJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body SigninFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.Signin(ctx.Request().Context(), request.(SigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Signin")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case Signin200JSONResponse:
		ctx.Response().Header().Set("Set-Cookie", fmt.Sprint(v.Headers.SetCookie))
		return ctx.JSON(200, v)
	case Signin401Response:
		return ctx.NoContent(401)
	case Signin404Response:
		return ctx.NoContent(404)
	case SignindefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// Signup operation middleware
func (sh *strictHandler) Signup(ctx echo.Context) error {
	var request SignupRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body SignupJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body SignupFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.Signup(ctx.Request().Context(), request.(SignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Signup")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case Signup200JSONResponse:
		ctx.Response().Header().Set("Set-Cookie", fmt.Sprint(v.Headers.SetCookie))
		return ctx.JSON(200, v)
	case Signup400Response:
		return ctx.NoContent(400)
	case SignupdefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// CreateThread operation middleware
func (sh *strictHandler) CreateThread(ctx echo.Context) error {
	var request CreateThreadRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body CreateThreadJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body CreateThreadFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.CreateThread(ctx.Request().Context(), request.(CreateThreadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateThread")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case CreateThread200JSONResponse:
		return ctx.JSON(200, v)
	case CreateThread401Response:
		return ctx.NoContent(401)
	case CreateThread404Response:
		return ctx.NoContent(404)
	case CreateThreaddefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx echo.Context) error {
	var request GetVersionRequestObject

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.GetVersion(ctx.Request().Context(), request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case GetVersion200TextResponse:
		return ctx.Blob(200, "text/plain", []byte(v))
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW3PbthL+Kzg4Z+a8UJLd5qHDpzpOL5p0kozVtA+OHiBiKSIBAQYXM6qH/70DgBRJ",
	"EbKUxOlt6gfb0gLYxX7ffljgHmeyrKQAYTRO77ECXUmhwX+4sqYAYVhGDJNiZbMMtDdkUhgQxv1Lqoq3",
	"AxZvtRTuO50VUBL33/8U5DjF/130XhbBqhfx1ZumSTAFnSlWue9xil8+xwkugFBQ3vsKzOxayncMxs7M",
	"rgKcYm0UE1u3UJPgp4TewHsL2gc7XvcpoUi1xibB1wqIgZ8LBYQ+9l7DqrHNBQvKvHM6d4H8AOYqy6QV",
	"5tFTHpY9kuQmwUthQAnCV6DuQH2nlFSP5/zVMiwY8d75RcExagcm+IU030sr6BS9F9Kg3JuaBL8WxJpC",
	"KqYhMnRv/Q0cBkkbcOB4F9Vk1hUafEYyR0QgcEMRExm3lIktIqiwJRHIYUg2HFAJWpMtzHGCKyUrUIaF",
	"WoLOyQFLE9xOidq03W5Bm7CpQ34n2LGXKWe9bR2sk26Y3LyFzBO7Qz29P4hpw2TUa0vGKxO1UuBw3Aol",
	"YTxqYfQUQ5bU6UHOwEMvSBlPiq3o0fAOksJoPCMj6RkIxDg/rI/HIfiBlBX3zqQ1RcZJrb/VRqodBTGX",
	"aouTaaxGvgMxnl0RrWup6HT4JPi9+26h05sZSMbhZj45XdfEwFaq3XRRQksmButupORAhCeR5NKqIwwa",
	"1NmXZEoltbnuuN9amTCwDfO0VFFLE8uBLEspXo12P87FqGoORR6QYSUgUwBSoKVVGaCa6F73E5xLVRKD",
	"U+zYPXPDY4QaVd+5XrTMzaydeb6rj4VhVJfnhtZOOjeqKWGHcjWMIUbk5aigD+XeCvbeAurLDuVSIVMw",
	"vQ/ZhdlX8kX7M/O/nrhf33Qfu5/hvqxlNJboV0rmjMMN5KBAZBALrmSClYQj1Q1CRroTiQRxnx44j1RE",
	"sVq4AZJF5BJK+ZY9QkHHXLYNlJMczl/mOL19eL1JuTbJRLt8T3AqsAk2TtoGevhgEN04J0VMiFhv8msB",
	"pgDlC8OEXpBpFEYjJgL9Oofznj0DpXUqp+M1J2y5AeWaFz8IWUGhpXRw5lZ0f18KvsOpURaSiFAqB7iO",
	"0ZIzbdzyfgSTQofFnTdUEI0KQlGuZIkqkBX39cMMlPpU6gLFeiYQpYjPoy5a0T6MxBvQHSjdtmt9Rv+v",
	"0UbSHTLwwfiathpcbisFdwxqPX8jjqdh0Ixxu415fn3zE8oVA0H5DrlBqC5YVngcFVQgKFBUM1P4kHxq",
	"ls/eCB+IlxwBWiMiKHIHEtkwzszuzJgM2T6Ii7MjorXMmNPFPowe/j0e08UPcm+Y4XBM3A2HcdbHWvkj",
	"cC5RLRWn//kcWe+iaOHoCDFV+/VeNVZ2UzKt227joAWWdBffUUnUOyprEagTTgJAAurB9qad85nKMJbe",
	"s0CMR/AXBK/Dx6e23dwgM1OkXGlBZhUzu5XLT4uMkrUOB7VrMXEWbvzdQYW7znumIWDbb7liz2EXrplM",
	"5OGOE3a/n4UT3EoFTvGly4+sQJCK4RR/Pb+YX7rzlJjCh7JobfPuwrsFL0GOSL7pXlKcumv7qoLMV+3g",
	"EeWri4uDK7SToUXFCRMn3i9id/RBsnB6u+7Ic4tLpjO8dvbF3eWibQv04p7R5qGQu8uh264iJRj/yHI7",
	"IWMYhpbPHOmEv8aYokfDV2zPgqBW570LjI7+dTx7sfn7cYvpg0mT4CcXl6dnjt4N/KQnpyft3yQ8QDmx",
	"3JyeFHtZOQBzwPnbdTOAtgNzAK81xaK7SC4024pAJne4TGFeBXsACLR52oreF3jG6+7SLtDhmh9mdV3P",
	"XCc8s4qDyCQN3dDnOQna87F8OfLy+HfkzJAl1hQPMcRWDzPEVv8y5AyGnDF78Oj8R8EdTm19HOHh6/YX",
	"wnnSbT0yxJH1Pw3d2Ev/P+vE6OjQ8qPrdI63Ab+0Q/7k5uXE9rRPRehPrOI4xQvXsjXr5vcAAAD//8vd",
	"uMrIGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
