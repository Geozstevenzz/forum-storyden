// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220728213615-b9782fb00949 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BrowserScopes = "browser.Scopes"
)

// APIError A description of an error including a human readable message.
type APIError struct {
	Error                string                 `json:"error"`
	Message              *string                `json:"message,omitempty"`
	Suggested            *string                `json:"suggested,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Account defines model for Account.
type Account struct {
	Bio       *string `json:"bio,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	Email     *string `json:"email,omitempty"`

	// Id A unique identifier for this resource.
	Id        Identifier `json:"id"`
	Name      *string    `json:"name,omitempty"`
	UpdatedAt *string    `json:"updatedAt,omitempty"`
}

// AccountName The username of an account.
type AccountName = string

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Identifier string `json:"identifier"`
	Token      string `json:"token"`
}

// AuthSuccess defines model for AuthSuccess.
type AuthSuccess struct {
	Id string `json:"id"`
}

// Category defines model for Category.
type Category struct {
	Admin       *bool   `json:"admin,omitempty"`
	Colour      *string `json:"colour,omitempty"`
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id        *Identifier `json:"id,omitempty"`
	Name      *string     `json:"name,omitempty"`
	PostCount *int        `json:"postCount,omitempty"`
	Sort      *int        `json:"sort,omitempty"`
}

// CommonProperties defines model for CommonProperties.
type CommonProperties struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// Identifier A unique identifier for this resource.
type Identifier string

// Post defines model for Post.
type Post struct {
	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// PostBodyMarkdown The body text of a post within a thread.
type PostBodyMarkdown = string

// PostSubmission A new post within a thread of posts. A post may reply to another post in
// the thread by specifying the `reply_to` property. The identifier in the
// `reply_to` value must be post within the same thread.
type PostSubmission struct {
	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`
}

// ProfileReference A minimal reference to an account.
type ProfileReference struct {
	// Id A unique identifier for this resource.
	Id *Identifier `json:"id,omitempty"`

	// Name The username of an account.
	Name *AccountName `json:"name,omitempty"`
}

// React defines model for React.
type React struct {
	Emoji *string `json:"emoji,omitempty"`

	// Id A unique identifier for this resource.
	Id *Identifier `json:"id,omitempty"`
}

// Thread defines model for Thread.
type Thread struct {
	// Author A minimal reference to an account.
	Author   ProfileReference `json:"author"`
	Category Category         `json:"category"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool `json:"pinned"`

	// Posts The number of posts under this thread.
	Posts *int `json:"posts,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts []React `json:"reacts"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A URL friendly slug which is prepended with the post ID
	// for uniqueness and sortability.
	Slug *string `json:"slug,omitempty"`

	// Tags A list of tags associated with the thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ThreadSubmission defines model for ThreadSubmission.
type ThreadSubmission struct {
	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// Category A unique identifier for this resource.
	Category Identifier `json:"category"`

	// Tags A list of tags for a thread.
	Tags ThreadTags `json:"tags"`

	// Title The title of a thread.
	Title ThreadTitle `json:"title"`
}

// ThreadTags A list of tags for a thread.
type ThreadTags = []string

// ThreadTitle The title of a thread.
type ThreadTitle = string

// AccountID A unique identifier for this resource.
type AccountID = Identifier

// ThreadID A unique identifier for this resource.
type ThreadID = Identifier

// AccountsGetSuccess defines model for AccountsGetSuccess.
type AccountsGetSuccess = Account

// InternalServerError A description of an error including a human readable message.
type InternalServerError = APIError

// PostsCreateSuccess A post within a thread of posts.
type PostsCreateSuccess = Post

// ThreadsCreateSuccess defines model for ThreadsCreateSuccess.
type ThreadsCreateSuccess = Thread

// ThreadsList defines model for ThreadsList.
type ThreadsList = []Thread

// AuthPassword defines model for AuthPassword.
type AuthPassword = AuthRequest

// PostsCreate A new post within a thread of posts. A post may reply to another post in
// the thread by specifying the `reply_to` property. The identifier in the
// `reply_to` value must be post within the same thread.
type PostsCreate = PostSubmission

// ThreadsCreate defines model for ThreadsCreate.
type ThreadsCreate = ThreadSubmission

// AuthPasswordSigninJSONRequestBody defines body for AuthPasswordSignin for application/json ContentType.
type AuthPasswordSigninJSONRequestBody = AuthRequest

// AuthPasswordSigninFormdataRequestBody defines body for AuthPasswordSignin for application/x-www-form-urlencoded ContentType.
type AuthPasswordSigninFormdataRequestBody = AuthRequest

// AuthPasswordSignupJSONRequestBody defines body for AuthPasswordSignup for application/json ContentType.
type AuthPasswordSignupJSONRequestBody = AuthRequest

// AuthPasswordSignupFormdataRequestBody defines body for AuthPasswordSignup for application/x-www-form-urlencoded ContentType.
type AuthPasswordSignupFormdataRequestBody = AuthRequest

// ThreadsCreateJSONRequestBody defines body for ThreadsCreate for application/json ContentType.
type ThreadsCreateJSONRequestBody = ThreadSubmission

// ThreadsCreateFormdataRequestBody defines body for ThreadsCreate for application/x-www-form-urlencoded ContentType.
type ThreadsCreateFormdataRequestBody = ThreadSubmission

// PostsCreateJSONRequestBody defines body for PostsCreate for application/json ContentType.
type PostsCreateJSONRequestBody = PostSubmission

// PostsCreateFormdataRequestBody defines body for PostsCreate for application/x-www-form-urlencoded ContentType.
type PostsCreateFormdataRequestBody = PostSubmission

// Getter for additional properties for APIError. Returns the specified
// element and whether it was found
func (a APIError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for APIError
func (a *APIError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for APIError to handle AdditionalProperties
func (a *APIError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["message"]; found {
		err = json.Unmarshal(raw, &a.Message)
		if err != nil {
			return fmt.Errorf("error reading 'message': %w", err)
		}
		delete(object, "message")
	}

	if raw, found := object["suggested"]; found {
		err = json.Unmarshal(raw, &a.Suggested)
		if err != nil {
			return fmt.Errorf("error reading 'suggested': %w", err)
		}
		delete(object, "suggested")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for APIError to handle AdditionalProperties
func (a APIError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if a.Message != nil {
		object["message"], err = json.Marshal(a.Message)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'message': %w", err)
		}
	}

	if a.Suggested != nil {
		object["suggested"], err = json.Marshal(a.Suggested)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suggested': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the OpenAPI 3.0 specification as JSON.
	// (GET /openapi.json)
	GetSpec(ctx echo.Context) error
	// Get an account by ID.
	// (GET /v1/accounts/{account_id})
	AccountsGet(ctx echo.Context, accountId AccountID) error
	// Sign in to an existing account with a username and password.
	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx echo.Context) error
	// Register a new account with a username and password.
	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx echo.Context) error
	// Get a list of all threads.
	// (GET /v1/threads)
	ThreadsList(ctx echo.Context) error
	// Create a new thread within the specified category.
	// (POST /v1/threads)
	ThreadsCreate(ctx echo.Context) error
	// Create a new post within a thread.
	// (POST /v1/threads/{thread_id}/posts)
	PostsCreate(ctx echo.Context, threadId ThreadID) error
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpec(ctx)
	return err
}

// AccountsGet converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId AccountID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsGet(ctx, accountId)
	return err
}

// AuthPasswordSignin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignin(ctx)
	return err
}

// AuthPasswordSignup converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignup(ctx)
	return err
}

// ThreadsList converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsList(ctx)
	return err
}

// ThreadsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsCreate(ctx)
	return err
}

// PostsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostsCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_id" -------------
	var threadId ThreadID

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, ctx.Param("thread_id"), &threadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostsCreate(ctx, threadId)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/openapi.json", wrapper.GetSpec)
	router.GET(baseURL+"/v1/accounts/:account_id", wrapper.AccountsGet)
	router.POST(baseURL+"/v1/auth/password/signin", wrapper.AuthPasswordSignin)
	router.POST(baseURL+"/v1/auth/password/signup", wrapper.AuthPasswordSignup)
	router.GET(baseURL+"/v1/threads", wrapper.ThreadsList)
	router.POST(baseURL+"/v1/threads", wrapper.ThreadsCreate)
	router.POST(baseURL+"/v1/threads/:thread_id/posts", wrapper.PostsCreate)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

type AccountsGetSuccessJSONResponse Account

func (t AccountsGetSuccessJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((Account)(t))
}

type AuthSuccessResponseHeaders struct {
	SetCookie string
}
type AuthSuccessJSONResponse struct {
	Body AuthSuccess

	Headers AuthSuccessResponseHeaders
}

func (t AuthSuccessJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type BadRequestResponse struct {
}

type InternalServerErrorJSONResponse APIError

func (t InternalServerErrorJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((APIError)(t))
}

type NotFoundResponse struct {
}

type PostsCreateSuccessJSONResponse Post

func (t PostsCreateSuccessJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((Post)(t))
}

type ThreadsCreateSuccessJSONResponse Thread

func (t ThreadsCreateSuccessJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((Thread)(t))
}

type ThreadsListJSONResponse []Thread

func (t ThreadsListJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(([]Thread)(t))
}

type UnauthorisedResponse struct {
}

type GetSpecRequestObject struct {
}

type GetSpec200TextResponse string

type AccountsGetRequestObject struct {
	AccountId AccountID `json:"account_id"`
}

type AccountsGet200JSONResponse = AccountsGetSuccessJSONResponse

type AccountsGet401Response = UnauthorisedResponse

type AccountsGet404Response = NotFoundResponse

type AccountsGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t AccountsGetdefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type AuthPasswordSigninRequestObject struct {
	JSONBody     *AuthPasswordSigninJSONRequestBody
	FormdataBody *AuthPasswordSigninFormdataRequestBody
}

type AuthPasswordSignin200JSONResponse = AuthSuccessJSONResponse

type AuthPasswordSignin401Response = UnauthorisedResponse

type AuthPasswordSignin404Response = NotFoundResponse

type AuthPasswordSignindefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t AuthPasswordSignindefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type AuthPasswordSignupRequestObject struct {
	JSONBody     *AuthPasswordSignupJSONRequestBody
	FormdataBody *AuthPasswordSignupFormdataRequestBody
}

type AuthPasswordSignup200JSONResponse = AuthSuccessJSONResponse

type AuthPasswordSignup400Response = BadRequestResponse

type AuthPasswordSignupdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t AuthPasswordSignupdefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type ThreadsListRequestObject struct {
}

type ThreadsList200JSONResponse = ThreadsListJSONResponse

type ThreadsList401Response = UnauthorisedResponse

type ThreadsList404Response = NotFoundResponse

type ThreadsListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t ThreadsListdefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type ThreadsCreateRequestObject struct {
	JSONBody     *ThreadsCreateJSONRequestBody
	FormdataBody *ThreadsCreateFormdataRequestBody
}

type ThreadsCreate200JSONResponse = ThreadsCreateSuccessJSONResponse

type ThreadsCreate401Response = UnauthorisedResponse

type ThreadsCreate404Response = NotFoundResponse

type ThreadsCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t ThreadsCreatedefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type PostsCreateRequestObject struct {
	ThreadId     ThreadID `json:"thread_id"`
	JSONBody     *PostsCreateJSONRequestBody
	FormdataBody *PostsCreateFormdataRequestBody
}

type PostsCreate200JSONResponse = PostsCreateSuccessJSONResponse

type PostsCreate401Response = UnauthorisedResponse

type PostsCreate404Response = NotFoundResponse

type PostsCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t PostsCreatedefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type GetVersionRequestObject struct {
}

type GetVersion200TextResponse string

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the OpenAPI 3.0 specification as JSON.
	// (GET /openapi.json)
	GetSpec(ctx context.Context, request GetSpecRequestObject) interface{}
	// Get an account by ID.
	// (GET /v1/accounts/{account_id})
	AccountsGet(ctx context.Context, request AccountsGetRequestObject) interface{}
	// Sign in to an existing account with a username and password.
	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx context.Context, request AuthPasswordSigninRequestObject) interface{}
	// Register a new account with a username and password.
	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx context.Context, request AuthPasswordSignupRequestObject) interface{}
	// Get a list of all threads.
	// (GET /v1/threads)
	ThreadsList(ctx context.Context, request ThreadsListRequestObject) interface{}
	// Create a new thread within the specified category.
	// (POST /v1/threads)
	ThreadsCreate(ctx context.Context, request ThreadsCreateRequestObject) interface{}
	// Create a new post within a thread.
	// (POST /v1/threads/{thread_id}/posts)
	PostsCreate(ctx context.Context, request PostsCreateRequestObject) interface{}
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) interface{}
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) interface{}

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetSpec operation middleware
func (sh *strictHandler) GetSpec(ctx echo.Context) error {
	var request GetSpecRequestObject

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.GetSpec(ctx.Request().Context(), request.(GetSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpec")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case GetSpec200TextResponse:
		return ctx.Blob(200, "text/plain", []byte(v))
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// AccountsGet operation middleware
func (sh *strictHandler) AccountsGet(ctx echo.Context, accountId AccountID) error {
	var request AccountsGetRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.AccountsGet(ctx.Request().Context(), request.(AccountsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsGet")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case AccountsGet200JSONResponse:
		return ctx.JSON(200, v)
	case AccountsGet401Response:
		return ctx.NoContent(401)
	case AccountsGet404Response:
		return ctx.NoContent(404)
	case AccountsGetdefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// AuthPasswordSignin operation middleware
func (sh *strictHandler) AuthPasswordSignin(ctx echo.Context) error {
	var request AuthPasswordSigninRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AuthPasswordSigninJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AuthPasswordSigninFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.AuthPasswordSignin(ctx.Request().Context(), request.(AuthPasswordSigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignin")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case AuthPasswordSignin200JSONResponse:
		ctx.Response().Header().Set("Set-Cookie", fmt.Sprint(v.Headers.SetCookie))
		return ctx.JSON(200, v)
	case AuthPasswordSignin401Response:
		return ctx.NoContent(401)
	case AuthPasswordSignin404Response:
		return ctx.NoContent(404)
	case AuthPasswordSignindefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// AuthPasswordSignup operation middleware
func (sh *strictHandler) AuthPasswordSignup(ctx echo.Context) error {
	var request AuthPasswordSignupRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AuthPasswordSignupJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AuthPasswordSignupFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.AuthPasswordSignup(ctx.Request().Context(), request.(AuthPasswordSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignup")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case AuthPasswordSignup200JSONResponse:
		ctx.Response().Header().Set("Set-Cookie", fmt.Sprint(v.Headers.SetCookie))
		return ctx.JSON(200, v)
	case AuthPasswordSignup400Response:
		return ctx.NoContent(400)
	case AuthPasswordSignupdefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// ThreadsList operation middleware
func (sh *strictHandler) ThreadsList(ctx echo.Context) error {
	var request ThreadsListRequestObject

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.ThreadsList(ctx.Request().Context(), request.(ThreadsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsList")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case ThreadsList200JSONResponse:
		return ctx.JSON(200, v)
	case ThreadsList401Response:
		return ctx.NoContent(401)
	case ThreadsList404Response:
		return ctx.NoContent(404)
	case ThreadsListdefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// ThreadsCreate operation middleware
func (sh *strictHandler) ThreadsCreate(ctx echo.Context) error {
	var request ThreadsCreateRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body ThreadsCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body ThreadsCreateFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.ThreadsCreate(ctx.Request().Context(), request.(ThreadsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsCreate")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case ThreadsCreate200JSONResponse:
		return ctx.JSON(200, v)
	case ThreadsCreate401Response:
		return ctx.NoContent(401)
	case ThreadsCreate404Response:
		return ctx.NoContent(404)
	case ThreadsCreatedefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// PostsCreate operation middleware
func (sh *strictHandler) PostsCreate(ctx echo.Context, threadId ThreadID) error {
	var request PostsCreateRequestObject

	request.ThreadId = threadId
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body PostsCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body PostsCreateFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.PostsCreate(ctx.Request().Context(), request.(PostsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostsCreate")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case PostsCreate200JSONResponse:
		return ctx.JSON(200, v)
	case PostsCreate401Response:
		return ctx.NoContent(401)
	case PostsCreate404Response:
		return ctx.NoContent(404)
	case PostsCreatedefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx echo.Context) error {
	var request GetVersionRequestObject

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.GetVersion(ctx.Request().Context(), request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case GetVersion200TextResponse:
		return ctx.Blob(200, "text/plain", []byte(v))
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
