// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Southclaws/storyden/api/src/infra/db/model/server"
)

// Server is the model entity for the Server schema.
type Server struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Hn holds the value of the "hn" field.
	Hn string `json:"hn,omitempty"`
	// Pc holds the value of the "pc" field.
	Pc int `json:"pc,omitempty"`
	// Pm holds the value of the "pm" field.
	Pm int `json:"pm,omitempty"`
	// Gm holds the value of the "gm" field.
	Gm string `json:"gm,omitempty"`
	// La holds the value of the "la" field.
	La string `json:"la,omitempty"`
	// Pa holds the value of the "pa" field.
	Pa bool `json:"pa,omitempty"`
	// Vn holds the value of the "vn" field.
	Vn string `json:"vn,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Banner holds the value of the "banner" field.
	Banner string `json:"banner,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId string `json:"userId,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt time.Time `json:"deletedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerQuery when eager-loading is set.
	Edges       ServerEdges `json:"edges"`
	rule_server *int
}

// ServerEdges holds the relations/edges for other nodes in the graph.
type ServerEdges struct {
	// Ru holds the value of the ru edge.
	Ru []*Rule `json:"ru,omitempty"`
	// User holds the value of the User edge.
	User []*User `json:"User,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RuOrErr returns the Ru value or an error if the edge
// was not loaded in eager-loading.
func (e ServerEdges) RuOrErr() ([]*Rule, error) {
	if e.loadedTypes[0] {
		return e.Ru, nil
	}
	return nil, &NotLoadedError{edge: "ru"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e ServerEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "User"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Server) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case server.FieldPa, server.FieldActive:
			values[i] = new(sql.NullBool)
		case server.FieldPc, server.FieldPm:
			values[i] = new(sql.NullInt64)
		case server.FieldID, server.FieldIP, server.FieldHn, server.FieldGm, server.FieldLa, server.FieldVn, server.FieldDomain, server.FieldDescription, server.FieldBanner, server.FieldUserId:
			values[i] = new(sql.NullString)
		case server.FieldUpdatedAt, server.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case server.ForeignKeys[0]: // rule_server
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Server", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Server fields.
func (s *Server) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case server.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case server.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				s.IP = value.String
			}
		case server.FieldHn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hn", values[i])
			} else if value.Valid {
				s.Hn = value.String
			}
		case server.FieldPc:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pc", values[i])
			} else if value.Valid {
				s.Pc = int(value.Int64)
			}
		case server.FieldPm:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pm", values[i])
			} else if value.Valid {
				s.Pm = int(value.Int64)
			}
		case server.FieldGm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gm", values[i])
			} else if value.Valid {
				s.Gm = value.String
			}
		case server.FieldLa:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field la", values[i])
			} else if value.Valid {
				s.La = value.String
			}
		case server.FieldPa:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pa", values[i])
			} else if value.Valid {
				s.Pa = value.Bool
			}
		case server.FieldVn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vn", values[i])
			} else if value.Valid {
				s.Vn = value.String
			}
		case server.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				s.Domain = value.String
			}
		case server.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case server.FieldBanner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field banner", values[i])
			} else if value.Valid {
				s.Banner = value.String
			}
		case server.FieldUserId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				s.UserId = value.String
			}
		case server.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				s.Active = value.Bool
			}
		case server.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case server.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				s.DeletedAt = value.Time
			}
		case server.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field rule_server", value)
			} else if value.Valid {
				s.rule_server = new(int)
				*s.rule_server = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRu queries the "ru" edge of the Server entity.
func (s *Server) QueryRu() *RuleQuery {
	return (&ServerClient{config: s.config}).QueryRu(s)
}

// QueryUser queries the "User" edge of the Server entity.
func (s *Server) QueryUser() *UserQuery {
	return (&ServerClient{config: s.config}).QueryUser(s)
}

// Update returns a builder for updating this Server.
// Note that you need to call Server.Unwrap() before calling this method if this Server
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Server) Update() *ServerUpdateOne {
	return (&ServerClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Server entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Server) Unwrap() *Server {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("model: Server is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Server) String() string {
	var builder strings.Builder
	builder.WriteString("Server(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", ip=")
	builder.WriteString(s.IP)
	builder.WriteString(", hn=")
	builder.WriteString(s.Hn)
	builder.WriteString(", pc=")
	builder.WriteString(fmt.Sprintf("%v", s.Pc))
	builder.WriteString(", pm=")
	builder.WriteString(fmt.Sprintf("%v", s.Pm))
	builder.WriteString(", gm=")
	builder.WriteString(s.Gm)
	builder.WriteString(", la=")
	builder.WriteString(s.La)
	builder.WriteString(", pa=")
	builder.WriteString(fmt.Sprintf("%v", s.Pa))
	builder.WriteString(", vn=")
	builder.WriteString(s.Vn)
	builder.WriteString(", domain=")
	builder.WriteString(s.Domain)
	builder.WriteString(", description=")
	builder.WriteString(s.Description)
	builder.WriteString(", banner=")
	builder.WriteString(s.Banner)
	builder.WriteString(", userId=")
	builder.WriteString(s.UserId)
	builder.WriteString(", active=")
	builder.WriteString(fmt.Sprintf("%v", s.Active))
	builder.WriteString(", updatedAt=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deletedAt=")
	builder.WriteString(s.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Servers is a parsable slice of Server.
type Servers []*Server

func (s Servers) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
