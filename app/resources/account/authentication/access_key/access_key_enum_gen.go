// Code generated by enumerator. DO NOT EDIT.

package access_key

import (
	"database/sql/driver"
	"fmt"
)

type AccessKeyKind struct {
	v accessKeyKindEnum
}

var (
	AccessKeyKindPersonal = AccessKeyKind{accessKeyKindPersonal}
	AccessKeyKindBot      = AccessKeyKind{accessKeyKindBot}
)

func (r AccessKeyKind) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r AccessKeyKind) String() string {
	return string(r.v)
}
func (r AccessKeyKind) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *AccessKeyKind) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewAccessKeyKind(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r AccessKeyKind) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *AccessKeyKind) Scan(__iNpUt__ any) error {
	s, err := NewAccessKeyKind(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewAccessKeyKind(__iNpUt__ string) (AccessKeyKind, error) {
	switch __iNpUt__ {
	case string(accessKeyKindPersonal):
		return AccessKeyKindPersonal, nil
	case string(accessKeyKindBot):
		return AccessKeyKindBot, nil
	default:
		return AccessKeyKind{}, fmt.Errorf("invalid value for type 'AccessKeyKind': '%s'", __iNpUt__)
	}
}
