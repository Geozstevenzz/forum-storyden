// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220728213615-b9782fb00949 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BrowserScopes = "browser.Scopes"
)

// APIError defines model for APIError.
type APIError struct {
	Error     string  `json:"error"`
	Message   *string `json:"message,omitempty"`
	Suggested *string `json:"suggested,omitempty"`
}

// AuthenticationRequest defines model for AuthenticationRequest.
type AuthenticationRequest struct {
	Identifier string `json:"identifier"`
	Token      string `json:"token"`
}

// AuthenticationResponse defines model for AuthenticationResponse.
type AuthenticationResponse struct {
	Id string `json:"id"`
}

// SigninJSONRequestBody defines body for Signin for application/json ContentType.
type SigninJSONRequestBody = AuthenticationRequest

// SigninFormdataRequestBody defines body for Signin for application/x-www-form-urlencoded ContentType.
type SigninFormdataRequestBody = AuthenticationRequest

// SignupJSONRequestBody defines body for Signup for application/json ContentType.
type SignupJSONRequestBody = AuthenticationRequest

// SignupFormdataRequestBody defines body for Signup for application/x-www-form-urlencoded ContentType.
type SignupFormdataRequestBody = AuthenticationRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /openapi.json)
	GetSpec(ctx echo.Context) error

	// (GET /v1/accounts/{id})
	GetAccount(ctx echo.Context, id string) error

	// (POST /v1/auth/password/signin)
	Signin(ctx echo.Context) error

	// (POST /v1/auth/password/signup)
	Signup(ctx echo.Context) error

	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpec(ctx)
	return err
}

// GetAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccount(ctx, id)
	return err
}

// Signin converts echo context to params.
func (w *ServerInterfaceWrapper) Signin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Signin(ctx)
	return err
}

// Signup converts echo context to params.
func (w *ServerInterfaceWrapper) Signup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Signup(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/openapi.json", wrapper.GetSpec)
	router.GET(baseURL+"/v1/accounts/:id", wrapper.GetAccount)
	router.POST(baseURL+"/v1/auth/password/signin", wrapper.Signin)
	router.POST(baseURL+"/v1/auth/password/signup", wrapper.Signup)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

type GetSpecRequestObject struct {
}

type GetSpec200TextResponse string

type GetAccountRequestObject struct {
	Id string `json:"id"`
}

type GetAccount200JSONResponse AuthenticationResponse

func (t GetAccount200JSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((AuthenticationResponse)(t))
}

type GetAccount404Response struct {
}

type GetAccount500JSONResponse APIError

func (t GetAccount500JSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((APIError)(t))
}

type SigninRequestObject struct {
	JSONBody     *SigninJSONRequestBody
	FormdataBody *SigninFormdataRequestBody
}

type Signin200ResponseHeaders struct {
	SetCookie string
}

type Signin200JSONResponse struct {
	Body    AuthenticationResponse
	Headers Signin200ResponseHeaders
}

func (t Signin200JSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type Signin401Response struct {
}

type Signin404Response struct {
}

type Signin500JSONResponse APIError

func (t Signin500JSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((APIError)(t))
}

type SignupRequestObject struct {
	JSONBody     *SignupJSONRequestBody
	FormdataBody *SignupFormdataRequestBody
}

type Signup200ResponseHeaders struct {
	SetCookie string
}

type Signup200JSONResponse struct {
	Body    AuthenticationResponse
	Headers Signup200ResponseHeaders
}

func (t Signup200JSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type Signup500JSONResponse APIError

func (t Signup500JSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((APIError)(t))
}

type GetVersionRequestObject struct {
}

type GetVersion200TextResponse string

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /openapi.json)
	GetSpec(ctx context.Context, request GetSpecRequestObject) interface{}

	// (GET /v1/accounts/{id})
	GetAccount(ctx context.Context, request GetAccountRequestObject) interface{}

	// (POST /v1/auth/password/signin)
	Signin(ctx context.Context, request SigninRequestObject) interface{}

	// (POST /v1/auth/password/signup)
	Signup(ctx context.Context, request SignupRequestObject) interface{}

	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) interface{}
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) interface{}

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetSpec operation middleware
func (sh *strictHandler) GetSpec(ctx echo.Context) error {
	var request GetSpecRequestObject

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.GetSpec(ctx.Request().Context(), request.(GetSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpec")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case GetSpec200TextResponse:
		return ctx.Blob(200, "text/plain", []byte(v))
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// GetAccount operation middleware
func (sh *strictHandler) GetAccount(ctx echo.Context, id string) error {
	var request GetAccountRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.GetAccount(ctx.Request().Context(), request.(GetAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccount")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case GetAccount200JSONResponse:
		return ctx.JSON(200, v)
	case GetAccount404Response:
		return ctx.NoContent(404)
	case GetAccount500JSONResponse:
		return ctx.JSON(500, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// Signin operation middleware
func (sh *strictHandler) Signin(ctx echo.Context) error {
	var request SigninRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body SigninJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body SigninFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.Signin(ctx.Request().Context(), request.(SigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Signin")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case Signin200JSONResponse:
		ctx.Response().Header().Set("Set-Cookie", fmt.Sprint(v.Headers.SetCookie))
		return ctx.JSON(200, v)
	case Signin401Response:
		return ctx.NoContent(401)
	case Signin404Response:
		return ctx.NoContent(404)
	case Signin500JSONResponse:
		return ctx.JSON(500, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// Signup operation middleware
func (sh *strictHandler) Signup(ctx echo.Context) error {
	var request SignupRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body SignupJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body SignupFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.Signup(ctx.Request().Context(), request.(SignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Signup")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case Signup200JSONResponse:
		ctx.Response().Header().Set("Set-Cookie", fmt.Sprint(v.Headers.SetCookie))
		return ctx.JSON(200, v)
	case Signup500JSONResponse:
		return ctx.JSON(500, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx echo.Context) error {
	var request GetVersionRequestObject

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.GetVersion(ctx.Request().Context(), request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case GetVersion200TextResponse:
		return ctx.Blob(200, "text/plain", []byte(v))
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/bMAz9KwG3oxMnW3fxad0HhqCHDQu2S5GDajO2WltSRappFvi/D5JixGnddMA2",
	"rAV2ihFS5ON7z5S3kOvGaIWKCbItUF5hI8Lj6Zf5R2u19c/GaoOWJYYIdn/zxiBkQGylKqFNoEEiUeJg",
	"jFxZIjEWA9E2AYvXTlofPd81WCZdmr64xJx9kVPHFSqWuWCp1Ve8dkh8H6EsfNJKYoCJt6IxdeinHVd5",
	"Ldb0lljbTYFqom0JyX24rK9QHZ42gmitbXE//Q7+Xvuu0K8MQ0YrwqFpHqdMFgMtPOuYOyt5s/DCxnIX",
	"Vq8pMiMVZJBrfSURElCiiR0iM2NCIqnVflxh5BluoPWFpVrpAEty3T8FCdygDecymPkxtUEljIQMXk+m",
	"kxkkYARXAUq6i00uSQeySwxq+ukDKfMCMviEvDCYg584chQOv5pO/U+uFaMKxxhvOTW1kGrv5SHq2gQK",
	"pNxKwxHn57MDsiA792SKkjy1jaQclj6e3sxSkefaKaZ0K4v2GOTTmBjGtaJBRuvLbe+03qWN5h8giXp4",
	"dvZqyAL6SrN1mBwZbfkoScKYeme5tKN9X++lxRVk8CLd74V0txTSB/z6AJ8JnExPfMnD0DdCO1KaRyvt",
	"VOHT3vxJiN3SGgA1V4xWiXq0QHuDdtQlHujeez3Ol23PBZ3uPSc4rtJuJ6QkSxV9ZzQNOGIR41FLJH6n",
	"i81fUyauRQ+0X/N2vF6vxyttm7GzNapcF3Eb/16TuIqegucSqFAU4T3bwgJ5/D6utuPLIDh1NuBU5RXW",
	"Vv7A4rnauW9gx9Ux8zpz3LzO/DfvkzTvczBc90Xw8HX5fZfyjy/5R24DCqPHe9zZGjJI/adNu2x/BgAA",
	"///PzaDrSgsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
