/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/version": {
    /**
     * The version number includes the date and time of the release build as
     * well as a short representation of the Git commit hash.
     */
    get: operations["GetVersion"];
  };
  "/openapi.json": {
    /**
     * Note: the generator creates a `map[string]interface{}` if this is set to
     * `application/json`... so I'm just using plain text for now.
     */
    get: operations["GetSpec"];
  };
  "/v1/auth/password/signup": {
    post: operations["AuthPasswordSignup"];
  };
  "/v1/auth/password/signin": {
    post: operations["AuthPasswordSignin"];
  };
  "/v1/accounts/{account_id}": {
    get: operations["AccountsGet"];
  };
  "/v1/threads": {
    get: operations["ThreadsList"];
    post: operations["ThreadsCreate"];
  };
  "/v1/threads/{thread_id}": {
    /**
     * Get information about a thread such as its title, author, when it was
     * created as well as a list of the posts within the thread.
     */
    get: operations["ThreadsGet"];
  };
  "/v1/threads/{thread_id}/posts": {
    post: operations["PostsCreate"];
  };
}

export interface components {
  schemas: {
    /**
     * Format: xid
     * @description A unique identifier for this resource.
     * @example cc5lnd2s1s4652adtu50
     */
    Identifier: string;
    CommonProperties: {
      id: components["schemas"]["Identifier"];
      /**
       * Format: date-time
       * @description The time the resource was created.
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The time the resource was updated.
       */
      updatedAt: string;
      /**
       * Format: date-time
       * @description The time the resource was soft-deleted.
       */
      deletedAt?: string;
    };
    /** @description A description of an error including a human readable message. */
    APIError: {
      error: string;
      message?: string;
      suggested?: string;
    } & { [key: string]: unknown };
    AuthRequest: {
      /** @example southclaws@storyden.org */
      identifier: string;
      /** @example password */
      token: string;
    };
    AuthSuccess: {
      id: string;
    };
    Account: {
      id: components["schemas"]["Identifier"];
      email?: string;
      name?: string;
      bio?: string;
      createdAt?: string;
      updatedAt?: string;
      deletedAt?: string;
    };
    ThreadSubmission: {
      title: components["schemas"]["ThreadTitle"];
      body: components["schemas"]["PostBodyMarkdown"];
      tags: components["schemas"]["ThreadTags"];
      category: components["schemas"]["Identifier"];
    };
    /**
     * @description A thread reference includes most of the information about a thread but
     * does not include the posts within the thread. Useful for rendering large
     * lists of threads or other situations when you don't need the full data.
     */
    ThreadReference: components["schemas"]["CommonProperties"] & {
      /**
       * @description The title of the thread.
       * @example Hello world!
       */
      title: string;
      /**
       * @description A URL friendly slug which is prepended with the post ID
       * for uniqueness and sortability.
       */
      slug: string;
      /** @description A short version of the thread's body text for use in previews. */
      short: string;
      /** @description Whether the thread is pinned in this category. */
      pinned: boolean;
      author: components["schemas"]["ProfileReference"];
      /** @description A list of tags associated with the thread. */
      tags: string[];
      /** @description The number of posts under this thread. */
      posts: number;
      category: components["schemas"]["Category"];
      /** @description A list of reactions this post has had from people. */
      reacts: components["schemas"]["React"][];
    };
    Thread: components["schemas"]["ThreadReference"] &
      ({
        posts: components["schemas"]["Post"][];
      } & {
        title: unknown;
        slug: unknown;
        short: unknown;
        pinned: unknown;
        author: unknown;
        tags: unknown;
        category: unknown;
        reacts: unknown;
      });
    Category: {
      id?: components["schemas"]["Identifier"];
      name?: string;
      description?: string;
      colour?: string;
      sort?: number;
      admin?: boolean;
      postCount?: number;
    };
    /**
     * @description A new post within a thread of posts. A post may reply to another post in
     * the thread by specifying the `reply_to` property. The identifier in the
     * `reply_to` value must be post within the same thread.
     */
    PostSubmission: components["schemas"]["Post"];
    /** @description A post within a thread of posts. */
    Post: components["schemas"]["CommonProperties"] & {
      body: components["schemas"]["PostBodyMarkdown"];
      /** @description If present, identifies the post that this post is replying to. */
      reply_to?: components["schemas"]["Identifier"];
    };
    React: {
      id?: components["schemas"]["Identifier"];
      emoji?: string;
    };
    /**
     * @description The username of an account.
     * @example Southclaws
     */
    AccountName: string;
    /** @description A minimal reference to an account. */
    ProfileReference: {
      id?: components["schemas"]["Identifier"];
      name?: components["schemas"]["AccountName"];
    };
    /**
     * @description The title of a thread.
     * @example Hello world!
     */
    ThreadTitle: string;
    /** @description A list of tags for a thread. */
    ThreadTags: string[];
    /**
     * @description The body text of a post within a thread.
     * @example # My post
     *
     * This is a _post_ within a _thread_ formatted in *markdown*.
     */
    PostBodyMarkdown: string;
  };
  responses: {
    /** Bad request */
    BadRequest: unknown;
    /** Not found */
    NotFound: unknown;
    /** Unauthorized */
    Unauthorised: unknown;
    /** Internal Server Error */
    InternalServerError: {
      content: {
        "application/json": components["schemas"]["APIError"];
      };
    };
    /** OK */
    AuthSuccess: {
      headers: {
        "Set-Cookie"?: string;
      };
      content: {
        "application/json": components["schemas"]["AuthSuccess"];
      };
    };
    /** OK */
    AccountsGetSuccess: {
      content: {
        "application/json": components["schemas"]["Account"];
      };
    };
    /** Thread created. */
    ThreadsCreateSuccess: {
      content: {
        "application/json": components["schemas"]["Thread"];
      };
    };
    /** List of all threads. */
    ThreadsList: {
      content: {
        "application/json": components["schemas"]["ThreadReference"][];
      };
    };
    /** The information about a thread and its posts. */
    ThreadsGet: {
      content: {
        "application/json": components["schemas"]["Thread"];
      };
    };
    /** Thread post created successfully. */
    PostsCreateSuccess: {
      content: {
        "application/json": components["schemas"]["Post"];
      };
    };
  };
  parameters: {
    /** @description Account ID */
    AccountID: components["schemas"]["Identifier"];
    /** @description Thread ID */
    ThreadID: components["schemas"]["Identifier"];
  };
  requestBodies: {
    AuthPassword: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["AuthRequest"];
        "application/json": components["schemas"]["AuthRequest"];
      };
    };
    ThreadsCreate: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["ThreadSubmission"];
        "application/json": components["schemas"]["ThreadSubmission"];
      };
    };
    /** Create a post within a thread. */
    PostsCreate: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["PostSubmission"];
        "application/json": components["schemas"]["PostSubmission"];
      };
    };
  };
}

export interface operations {
  /**
   * The version number includes the date and time of the release build as
   * well as a short representation of the Git commit hash.
   */
  GetVersion: {
    responses: {
      /** OK */
      200: {
        content: {
          "text/plain": string;
        };
      };
    };
  };
  /**
   * Note: the generator creates a `map[string]interface{}` if this is set to
   * `application/json`... so I'm just using plain text for now.
   */
  GetSpec: {
    responses: {
      /** OK */
      200: {
        content: {
          "text/plain": string;
        };
      };
    };
  };
  AuthPasswordSignup: {
    responses: {
      200: components["responses"]["AuthSuccess"];
      400: components["responses"]["BadRequest"];
      default: components["responses"]["InternalServerError"];
    };
    requestBody: components["requestBodies"]["AuthPassword"];
  };
  AuthPasswordSignin: {
    responses: {
      200: components["responses"]["AuthSuccess"];
      401: components["responses"]["Unauthorised"];
      404: components["responses"]["NotFound"];
      default: components["responses"]["InternalServerError"];
    };
    requestBody: components["requestBodies"]["AuthPassword"];
  };
  AccountsGet: {
    parameters: {
      path: {
        /** Account ID */
        account_id: components["parameters"]["AccountID"];
      };
    };
    responses: {
      200: components["responses"]["AccountsGetSuccess"];
      401: components["responses"]["Unauthorised"];
      404: components["responses"]["NotFound"];
      default: components["responses"]["InternalServerError"];
    };
  };
  ThreadsList: {
    responses: {
      200: components["responses"]["ThreadsList"];
      401: components["responses"]["Unauthorised"];
      404: components["responses"]["NotFound"];
      default: components["responses"]["InternalServerError"];
    };
  };
  ThreadsCreate: {
    responses: {
      200: components["responses"]["ThreadsCreateSuccess"];
      401: components["responses"]["Unauthorised"];
      404: components["responses"]["NotFound"];
      default: components["responses"]["InternalServerError"];
    };
    requestBody: components["requestBodies"]["ThreadsCreate"];
  };
  /**
   * Get information about a thread such as its title, author, when it was
   * created as well as a list of the posts within the thread.
   */
  ThreadsGet: {
    parameters: {
      path: {
        /** Thread ID */
        thread_id: components["parameters"]["ThreadID"];
      };
    };
    responses: {
      200: components["responses"]["ThreadsGet"];
      401: components["responses"]["Unauthorised"];
      404: components["responses"]["NotFound"];
      default: components["responses"]["InternalServerError"];
    };
  };
  PostsCreate: {
    parameters: {
      path: {
        /** Thread ID */
        thread_id: components["parameters"]["ThreadID"];
      };
    };
    responses: {
      200: components["responses"]["PostsCreateSuccess"];
      401: components["responses"]["Unauthorised"];
      404: components["responses"]["NotFound"];
      default: components["responses"]["InternalServerError"];
    };
    requestBody: components["requestBodies"]["PostsCreate"];
  };
}

export interface external {}
