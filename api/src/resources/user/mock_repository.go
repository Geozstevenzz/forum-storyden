// Code generated by mockery v2.10.2. DO NOT EDIT.

package user

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Ban provides a mock function with given fields: ctx, userId
func (_m *MockRepository) Ban(ctx context.Context, userId UserID) (*User, error) {
	ret := _m.Called(ctx, userId)

	var r0 *User
	if rf, ok := ret.Get(0).(func(context.Context, UserID) *User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, UserID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, email, username
func (_m *MockRepository) CreateUser(ctx context.Context, email string, username string) (*User, error) {
	ret := _m.Called(ctx, email, username)

	var r0 *User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *User); ok {
		r0 = rf(ctx, email, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userId, public
func (_m *MockRepository) GetUser(ctx context.Context, userId UserID, public bool) (*User, error) {
	ret := _m.Called(ctx, userId, public)

	var r0 *User
	if rf, ok := ret.Get(0).(func(context.Context, UserID, bool) *User); ok {
		r0 = rf(ctx, userId, public)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, UserID, bool) error); ok {
		r1 = rf(ctx, userId, public)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email, public
func (_m *MockRepository) GetUserByEmail(ctx context.Context, email string, public bool) (*User, error) {
	ret := _m.Called(ctx, email, public)

	var r0 *User
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *User); ok {
		r0 = rf(ctx, email, public)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, email, public)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, sort, max, skip, public
func (_m *MockRepository) GetUsers(ctx context.Context, sort string, max int, skip int, public bool) ([]User, error) {
	ret := _m.Called(ctx, sort, max, skip, public)

	var r0 []User
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, bool) []User); ok {
		r0 = rf(ctx, sort, max, skip, public)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int, bool) error); ok {
		r1 = rf(ctx, sort, max, skip, public)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAdmin provides a mock function with given fields: ctx, userId, status
func (_m *MockRepository) SetAdmin(ctx context.Context, userId UserID, status bool) error {
	ret := _m.Called(ctx, userId, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UserID, bool) error); ok {
		r0 = rf(ctx, userId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unban provides a mock function with given fields: ctx, userId
func (_m *MockRepository) Unban(ctx context.Context, userId UserID) (*User, error) {
	ret := _m.Called(ctx, userId)

	var r0 *User
	if rf, ok := ret.Get(0).(func(context.Context, UserID) *User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, UserID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, userId, email, name, bio
func (_m *MockRepository) UpdateUser(ctx context.Context, userId UserID, email *string, name *string, bio *string) (*User, error) {
	ret := _m.Called(ctx, userId, email, name, bio)

	var r0 *User
	if rf, ok := ret.Get(0).(func(context.Context, UserID, *string, *string, *string) *User); ok {
		r0 = rf(ctx, userId, email, name, bio)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, UserID, *string, *string, *string) error); ok {
		r1 = rf(ctx, userId, email, name, bio)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
