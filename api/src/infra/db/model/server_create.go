// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/api/src/infra/db/model/rule"
	"github.com/Southclaws/storyden/api/src/infra/db/model/server"
	"github.com/Southclaws/storyden/api/src/infra/db/model/user"
	"github.com/google/uuid"
)

// ServerCreate is the builder for creating a Server entity.
type ServerCreate struct {
	config
	mutation *ServerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIP sets the "ip" field.
func (sc *ServerCreate) SetIP(s string) *ServerCreate {
	sc.mutation.SetIP(s)
	return sc
}

// SetHn sets the "hn" field.
func (sc *ServerCreate) SetHn(s string) *ServerCreate {
	sc.mutation.SetHn(s)
	return sc
}

// SetPc sets the "pc" field.
func (sc *ServerCreate) SetPc(i int) *ServerCreate {
	sc.mutation.SetPc(i)
	return sc
}

// SetPm sets the "pm" field.
func (sc *ServerCreate) SetPm(i int) *ServerCreate {
	sc.mutation.SetPm(i)
	return sc
}

// SetGm sets the "gm" field.
func (sc *ServerCreate) SetGm(s string) *ServerCreate {
	sc.mutation.SetGm(s)
	return sc
}

// SetLa sets the "la" field.
func (sc *ServerCreate) SetLa(s string) *ServerCreate {
	sc.mutation.SetLa(s)
	return sc
}

// SetPa sets the "pa" field.
func (sc *ServerCreate) SetPa(b bool) *ServerCreate {
	sc.mutation.SetPa(b)
	return sc
}

// SetVn sets the "vn" field.
func (sc *ServerCreate) SetVn(s string) *ServerCreate {
	sc.mutation.SetVn(s)
	return sc
}

// SetDomain sets the "domain" field.
func (sc *ServerCreate) SetDomain(s string) *ServerCreate {
	sc.mutation.SetDomain(s)
	return sc
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (sc *ServerCreate) SetNillableDomain(s *string) *ServerCreate {
	if s != nil {
		sc.SetDomain(*s)
	}
	return sc
}

// SetDescription sets the "description" field.
func (sc *ServerCreate) SetDescription(s string) *ServerCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *ServerCreate) SetNillableDescription(s *string) *ServerCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetBanner sets the "banner" field.
func (sc *ServerCreate) SetBanner(s string) *ServerCreate {
	sc.mutation.SetBanner(s)
	return sc
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (sc *ServerCreate) SetNillableBanner(s *string) *ServerCreate {
	if s != nil {
		sc.SetBanner(*s)
	}
	return sc
}

// SetUserId sets the "userId" field.
func (sc *ServerCreate) SetUserId(s string) *ServerCreate {
	sc.mutation.SetUserId(s)
	return sc
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (sc *ServerCreate) SetNillableUserId(s *string) *ServerCreate {
	if s != nil {
		sc.SetUserId(*s)
	}
	return sc
}

// SetActive sets the "active" field.
func (sc *ServerCreate) SetActive(b bool) *ServerCreate {
	sc.mutation.SetActive(b)
	return sc
}

// SetUpdatedAt sets the "updatedAt" field.
func (sc *ServerCreate) SetUpdatedAt(t time.Time) *ServerCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetDeletedAt sets the "deletedAt" field.
func (sc *ServerCreate) SetDeletedAt(t time.Time) *ServerCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (sc *ServerCreate) SetNillableDeletedAt(t *time.Time) *ServerCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ServerCreate) SetID(s string) *ServerCreate {
	sc.mutation.SetID(s)
	return sc
}

// AddRuIDs adds the "ru" edge to the Rule entity by IDs.
func (sc *ServerCreate) AddRuIDs(ids ...int) *ServerCreate {
	sc.mutation.AddRuIDs(ids...)
	return sc
}

// AddRu adds the "ru" edges to the Rule entity.
func (sc *ServerCreate) AddRu(r ...*Rule) *ServerCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sc.AddRuIDs(ids...)
}

// AddUserIDs adds the "User" edge to the User entity by IDs.
func (sc *ServerCreate) AddUserIDs(ids ...uuid.UUID) *ServerCreate {
	sc.mutation.AddUserIDs(ids...)
	return sc
}

// AddUser adds the "User" edges to the User entity.
func (sc *ServerCreate) AddUser(u ...*User) *ServerCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sc.AddUserIDs(ids...)
}

// Mutation returns the ServerMutation object of the builder.
func (sc *ServerCreate) Mutation() *ServerMutation {
	return sc.mutation
}

// Save creates the Server in the database.
func (sc *ServerCreate) Save(ctx context.Context) (*Server, error) {
	var (
		err  error
		node *Server
	)
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ServerCreate) SaveX(ctx context.Context) *Server {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ServerCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ServerCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ServerCreate) check() error {
	if _, ok := sc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`model: missing required field "Server.ip"`)}
	}
	if _, ok := sc.mutation.Hn(); !ok {
		return &ValidationError{Name: "hn", err: errors.New(`model: missing required field "Server.hn"`)}
	}
	if _, ok := sc.mutation.Pc(); !ok {
		return &ValidationError{Name: "pc", err: errors.New(`model: missing required field "Server.pc"`)}
	}
	if _, ok := sc.mutation.Pm(); !ok {
		return &ValidationError{Name: "pm", err: errors.New(`model: missing required field "Server.pm"`)}
	}
	if _, ok := sc.mutation.Gm(); !ok {
		return &ValidationError{Name: "gm", err: errors.New(`model: missing required field "Server.gm"`)}
	}
	if _, ok := sc.mutation.La(); !ok {
		return &ValidationError{Name: "la", err: errors.New(`model: missing required field "Server.la"`)}
	}
	if _, ok := sc.mutation.Pa(); !ok {
		return &ValidationError{Name: "pa", err: errors.New(`model: missing required field "Server.pa"`)}
	}
	if _, ok := sc.mutation.Vn(); !ok {
		return &ValidationError{Name: "vn", err: errors.New(`model: missing required field "Server.vn"`)}
	}
	if _, ok := sc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`model: missing required field "Server.active"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`model: missing required field "Server.updatedAt"`)}
	}
	return nil
}

func (sc *ServerCreate) sqlSave(ctx context.Context) (*Server, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Server.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (sc *ServerCreate) createSpec() (*Server, *sqlgraph.CreateSpec) {
	var (
		_node = &Server{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: server.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: server.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := sc.mutation.Hn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldHn,
		})
		_node.Hn = value
	}
	if value, ok := sc.mutation.Pc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: server.FieldPc,
		})
		_node.Pc = value
	}
	if value, ok := sc.mutation.Pm(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: server.FieldPm,
		})
		_node.Pm = value
	}
	if value, ok := sc.mutation.Gm(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldGm,
		})
		_node.Gm = value
	}
	if value, ok := sc.mutation.La(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldLa,
		})
		_node.La = value
	}
	if value, ok := sc.mutation.Pa(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: server.FieldPa,
		})
		_node.Pa = value
	}
	if value, ok := sc.mutation.Vn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldVn,
		})
		_node.Vn = value
	}
	if value, ok := sc.mutation.Domain(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldDomain,
		})
		_node.Domain = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := sc.mutation.Banner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldBanner,
		})
		_node.Banner = value
	}
	if value, ok := sc.mutation.UserId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldUserId,
		})
		_node.UserId = value
	}
	if value, ok := sc.mutation.Active(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: server.FieldActive,
		})
		_node.Active = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: server.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: server.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if nodes := sc.mutation.RuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.RuTable,
			Columns: []string{server.RuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.UserTable,
			Columns: []string{server.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Server.Create().
//		SetIP(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServerUpsert) {
//			SetIP(v+v).
//		}).
//		Exec(ctx)
//
func (sc *ServerCreate) OnConflict(opts ...sql.ConflictOption) *ServerUpsertOne {
	sc.conflict = opts
	return &ServerUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Server.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *ServerCreate) OnConflictColumns(columns ...string) *ServerUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ServerUpsertOne{
		create: sc,
	}
}

type (
	// ServerUpsertOne is the builder for "upsert"-ing
	//  one Server node.
	ServerUpsertOne struct {
		create *ServerCreate
	}

	// ServerUpsert is the "OnConflict" setter.
	ServerUpsert struct {
		*sql.UpdateSet
	}
)

// SetIP sets the "ip" field.
func (u *ServerUpsert) SetIP(v string) *ServerUpsert {
	u.Set(server.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *ServerUpsert) UpdateIP() *ServerUpsert {
	u.SetExcluded(server.FieldIP)
	return u
}

// SetHn sets the "hn" field.
func (u *ServerUpsert) SetHn(v string) *ServerUpsert {
	u.Set(server.FieldHn, v)
	return u
}

// UpdateHn sets the "hn" field to the value that was provided on create.
func (u *ServerUpsert) UpdateHn() *ServerUpsert {
	u.SetExcluded(server.FieldHn)
	return u
}

// SetPc sets the "pc" field.
func (u *ServerUpsert) SetPc(v int) *ServerUpsert {
	u.Set(server.FieldPc, v)
	return u
}

// UpdatePc sets the "pc" field to the value that was provided on create.
func (u *ServerUpsert) UpdatePc() *ServerUpsert {
	u.SetExcluded(server.FieldPc)
	return u
}

// AddPc adds v to the "pc" field.
func (u *ServerUpsert) AddPc(v int) *ServerUpsert {
	u.Add(server.FieldPc, v)
	return u
}

// SetPm sets the "pm" field.
func (u *ServerUpsert) SetPm(v int) *ServerUpsert {
	u.Set(server.FieldPm, v)
	return u
}

// UpdatePm sets the "pm" field to the value that was provided on create.
func (u *ServerUpsert) UpdatePm() *ServerUpsert {
	u.SetExcluded(server.FieldPm)
	return u
}

// AddPm adds v to the "pm" field.
func (u *ServerUpsert) AddPm(v int) *ServerUpsert {
	u.Add(server.FieldPm, v)
	return u
}

// SetGm sets the "gm" field.
func (u *ServerUpsert) SetGm(v string) *ServerUpsert {
	u.Set(server.FieldGm, v)
	return u
}

// UpdateGm sets the "gm" field to the value that was provided on create.
func (u *ServerUpsert) UpdateGm() *ServerUpsert {
	u.SetExcluded(server.FieldGm)
	return u
}

// SetLa sets the "la" field.
func (u *ServerUpsert) SetLa(v string) *ServerUpsert {
	u.Set(server.FieldLa, v)
	return u
}

// UpdateLa sets the "la" field to the value that was provided on create.
func (u *ServerUpsert) UpdateLa() *ServerUpsert {
	u.SetExcluded(server.FieldLa)
	return u
}

// SetPa sets the "pa" field.
func (u *ServerUpsert) SetPa(v bool) *ServerUpsert {
	u.Set(server.FieldPa, v)
	return u
}

// UpdatePa sets the "pa" field to the value that was provided on create.
func (u *ServerUpsert) UpdatePa() *ServerUpsert {
	u.SetExcluded(server.FieldPa)
	return u
}

// SetVn sets the "vn" field.
func (u *ServerUpsert) SetVn(v string) *ServerUpsert {
	u.Set(server.FieldVn, v)
	return u
}

// UpdateVn sets the "vn" field to the value that was provided on create.
func (u *ServerUpsert) UpdateVn() *ServerUpsert {
	u.SetExcluded(server.FieldVn)
	return u
}

// SetDomain sets the "domain" field.
func (u *ServerUpsert) SetDomain(v string) *ServerUpsert {
	u.Set(server.FieldDomain, v)
	return u
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *ServerUpsert) UpdateDomain() *ServerUpsert {
	u.SetExcluded(server.FieldDomain)
	return u
}

// ClearDomain clears the value of the "domain" field.
func (u *ServerUpsert) ClearDomain() *ServerUpsert {
	u.SetNull(server.FieldDomain)
	return u
}

// SetDescription sets the "description" field.
func (u *ServerUpsert) SetDescription(v string) *ServerUpsert {
	u.Set(server.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ServerUpsert) UpdateDescription() *ServerUpsert {
	u.SetExcluded(server.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ServerUpsert) ClearDescription() *ServerUpsert {
	u.SetNull(server.FieldDescription)
	return u
}

// SetBanner sets the "banner" field.
func (u *ServerUpsert) SetBanner(v string) *ServerUpsert {
	u.Set(server.FieldBanner, v)
	return u
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *ServerUpsert) UpdateBanner() *ServerUpsert {
	u.SetExcluded(server.FieldBanner)
	return u
}

// ClearBanner clears the value of the "banner" field.
func (u *ServerUpsert) ClearBanner() *ServerUpsert {
	u.SetNull(server.FieldBanner)
	return u
}

// SetUserId sets the "userId" field.
func (u *ServerUpsert) SetUserId(v string) *ServerUpsert {
	u.Set(server.FieldUserId, v)
	return u
}

// UpdateUserId sets the "userId" field to the value that was provided on create.
func (u *ServerUpsert) UpdateUserId() *ServerUpsert {
	u.SetExcluded(server.FieldUserId)
	return u
}

// ClearUserId clears the value of the "userId" field.
func (u *ServerUpsert) ClearUserId() *ServerUpsert {
	u.SetNull(server.FieldUserId)
	return u
}

// SetActive sets the "active" field.
func (u *ServerUpsert) SetActive(v bool) *ServerUpsert {
	u.Set(server.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ServerUpsert) UpdateActive() *ServerUpsert {
	u.SetExcluded(server.FieldActive)
	return u
}

// SetUpdatedAt sets the "updatedAt" field.
func (u *ServerUpsert) SetUpdatedAt(v time.Time) *ServerUpsert {
	u.Set(server.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updatedAt" field to the value that was provided on create.
func (u *ServerUpsert) UpdateUpdatedAt() *ServerUpsert {
	u.SetExcluded(server.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deletedAt" field.
func (u *ServerUpsert) SetDeletedAt(v time.Time) *ServerUpsert {
	u.Set(server.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deletedAt" field to the value that was provided on create.
func (u *ServerUpsert) UpdateDeletedAt() *ServerUpsert {
	u.SetExcluded(server.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (u *ServerUpsert) ClearDeletedAt() *ServerUpsert {
	u.SetNull(server.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Server.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(server.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ServerUpsertOne) UpdateNewValues() *ServerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(server.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Server.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ServerUpsertOne) Ignore() *ServerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServerUpsertOne) DoNothing() *ServerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServerCreate.OnConflict
// documentation for more info.
func (u *ServerUpsertOne) Update(set func(*ServerUpsert)) *ServerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServerUpsert{UpdateSet: update})
	}))
	return u
}

// SetIP sets the "ip" field.
func (u *ServerUpsertOne) SetIP(v string) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateIP() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateIP()
	})
}

// SetHn sets the "hn" field.
func (u *ServerUpsertOne) SetHn(v string) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetHn(v)
	})
}

// UpdateHn sets the "hn" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateHn() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateHn()
	})
}

// SetPc sets the "pc" field.
func (u *ServerUpsertOne) SetPc(v int) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetPc(v)
	})
}

// AddPc adds v to the "pc" field.
func (u *ServerUpsertOne) AddPc(v int) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.AddPc(v)
	})
}

// UpdatePc sets the "pc" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdatePc() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdatePc()
	})
}

// SetPm sets the "pm" field.
func (u *ServerUpsertOne) SetPm(v int) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetPm(v)
	})
}

// AddPm adds v to the "pm" field.
func (u *ServerUpsertOne) AddPm(v int) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.AddPm(v)
	})
}

// UpdatePm sets the "pm" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdatePm() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdatePm()
	})
}

// SetGm sets the "gm" field.
func (u *ServerUpsertOne) SetGm(v string) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetGm(v)
	})
}

// UpdateGm sets the "gm" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateGm() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateGm()
	})
}

// SetLa sets the "la" field.
func (u *ServerUpsertOne) SetLa(v string) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetLa(v)
	})
}

// UpdateLa sets the "la" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateLa() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateLa()
	})
}

// SetPa sets the "pa" field.
func (u *ServerUpsertOne) SetPa(v bool) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetPa(v)
	})
}

// UpdatePa sets the "pa" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdatePa() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdatePa()
	})
}

// SetVn sets the "vn" field.
func (u *ServerUpsertOne) SetVn(v string) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetVn(v)
	})
}

// UpdateVn sets the "vn" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateVn() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateVn()
	})
}

// SetDomain sets the "domain" field.
func (u *ServerUpsertOne) SetDomain(v string) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateDomain() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateDomain()
	})
}

// ClearDomain clears the value of the "domain" field.
func (u *ServerUpsertOne) ClearDomain() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.ClearDomain()
	})
}

// SetDescription sets the "description" field.
func (u *ServerUpsertOne) SetDescription(v string) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateDescription() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ServerUpsertOne) ClearDescription() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.ClearDescription()
	})
}

// SetBanner sets the "banner" field.
func (u *ServerUpsertOne) SetBanner(v string) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetBanner(v)
	})
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateBanner() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateBanner()
	})
}

// ClearBanner clears the value of the "banner" field.
func (u *ServerUpsertOne) ClearBanner() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.ClearBanner()
	})
}

// SetUserId sets the "userId" field.
func (u *ServerUpsertOne) SetUserId(v string) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetUserId(v)
	})
}

// UpdateUserId sets the "userId" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateUserId() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateUserId()
	})
}

// ClearUserId clears the value of the "userId" field.
func (u *ServerUpsertOne) ClearUserId() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.ClearUserId()
	})
}

// SetActive sets the "active" field.
func (u *ServerUpsertOne) SetActive(v bool) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateActive() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateActive()
	})
}

// SetUpdatedAt sets the "updatedAt" field.
func (u *ServerUpsertOne) SetUpdatedAt(v time.Time) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updatedAt" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateUpdatedAt() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deletedAt" field.
func (u *ServerUpsertOne) SetDeletedAt(v time.Time) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deletedAt" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateDeletedAt() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (u *ServerUpsertOne) ClearDeletedAt() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *ServerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ServerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ServerUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: ServerUpsertOne.ID is not supported by MySQL driver. Use ServerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ServerUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ServerCreateBulk is the builder for creating many Server entities in bulk.
type ServerCreateBulk struct {
	config
	builders []*ServerCreate
	conflict []sql.ConflictOption
}

// Save creates the Server entities in the database.
func (scb *ServerCreateBulk) Save(ctx context.Context) ([]*Server, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Server, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ServerCreateBulk) SaveX(ctx context.Context) []*Server {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ServerCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ServerCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Server.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServerUpsert) {
//			SetIP(v+v).
//		}).
//		Exec(ctx)
//
func (scb *ServerCreateBulk) OnConflict(opts ...sql.ConflictOption) *ServerUpsertBulk {
	scb.conflict = opts
	return &ServerUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Server.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *ServerCreateBulk) OnConflictColumns(columns ...string) *ServerUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ServerUpsertBulk{
		create: scb,
	}
}

// ServerUpsertBulk is the builder for "upsert"-ing
// a bulk of Server nodes.
type ServerUpsertBulk struct {
	create *ServerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Server.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(server.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ServerUpsertBulk) UpdateNewValues() *ServerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(server.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Server.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ServerUpsertBulk) Ignore() *ServerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServerUpsertBulk) DoNothing() *ServerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServerCreateBulk.OnConflict
// documentation for more info.
func (u *ServerUpsertBulk) Update(set func(*ServerUpsert)) *ServerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServerUpsert{UpdateSet: update})
	}))
	return u
}

// SetIP sets the "ip" field.
func (u *ServerUpsertBulk) SetIP(v string) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateIP() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateIP()
	})
}

// SetHn sets the "hn" field.
func (u *ServerUpsertBulk) SetHn(v string) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetHn(v)
	})
}

// UpdateHn sets the "hn" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateHn() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateHn()
	})
}

// SetPc sets the "pc" field.
func (u *ServerUpsertBulk) SetPc(v int) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetPc(v)
	})
}

// AddPc adds v to the "pc" field.
func (u *ServerUpsertBulk) AddPc(v int) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.AddPc(v)
	})
}

// UpdatePc sets the "pc" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdatePc() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdatePc()
	})
}

// SetPm sets the "pm" field.
func (u *ServerUpsertBulk) SetPm(v int) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetPm(v)
	})
}

// AddPm adds v to the "pm" field.
func (u *ServerUpsertBulk) AddPm(v int) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.AddPm(v)
	})
}

// UpdatePm sets the "pm" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdatePm() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdatePm()
	})
}

// SetGm sets the "gm" field.
func (u *ServerUpsertBulk) SetGm(v string) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetGm(v)
	})
}

// UpdateGm sets the "gm" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateGm() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateGm()
	})
}

// SetLa sets the "la" field.
func (u *ServerUpsertBulk) SetLa(v string) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetLa(v)
	})
}

// UpdateLa sets the "la" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateLa() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateLa()
	})
}

// SetPa sets the "pa" field.
func (u *ServerUpsertBulk) SetPa(v bool) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetPa(v)
	})
}

// UpdatePa sets the "pa" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdatePa() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdatePa()
	})
}

// SetVn sets the "vn" field.
func (u *ServerUpsertBulk) SetVn(v string) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetVn(v)
	})
}

// UpdateVn sets the "vn" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateVn() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateVn()
	})
}

// SetDomain sets the "domain" field.
func (u *ServerUpsertBulk) SetDomain(v string) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateDomain() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateDomain()
	})
}

// ClearDomain clears the value of the "domain" field.
func (u *ServerUpsertBulk) ClearDomain() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.ClearDomain()
	})
}

// SetDescription sets the "description" field.
func (u *ServerUpsertBulk) SetDescription(v string) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateDescription() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ServerUpsertBulk) ClearDescription() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.ClearDescription()
	})
}

// SetBanner sets the "banner" field.
func (u *ServerUpsertBulk) SetBanner(v string) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetBanner(v)
	})
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateBanner() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateBanner()
	})
}

// ClearBanner clears the value of the "banner" field.
func (u *ServerUpsertBulk) ClearBanner() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.ClearBanner()
	})
}

// SetUserId sets the "userId" field.
func (u *ServerUpsertBulk) SetUserId(v string) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetUserId(v)
	})
}

// UpdateUserId sets the "userId" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateUserId() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateUserId()
	})
}

// ClearUserId clears the value of the "userId" field.
func (u *ServerUpsertBulk) ClearUserId() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.ClearUserId()
	})
}

// SetActive sets the "active" field.
func (u *ServerUpsertBulk) SetActive(v bool) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateActive() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateActive()
	})
}

// SetUpdatedAt sets the "updatedAt" field.
func (u *ServerUpsertBulk) SetUpdatedAt(v time.Time) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updatedAt" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateUpdatedAt() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deletedAt" field.
func (u *ServerUpsertBulk) SetDeletedAt(v time.Time) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deletedAt" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateDeletedAt() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (u *ServerUpsertBulk) ClearDeletedAt() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *ServerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ServerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ServerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
