package session

import (
	"context"
	"errors"

	"github.com/Southclaws/fault"
	"github.com/Southclaws/fault/fctx"
	"github.com/Southclaws/fault/ftag"
	"github.com/Southclaws/opt"

	"github.com/Southclaws/storyden/app/resources/account"
	"github.com/Southclaws/storyden/internal/infrastructure/pubsub"
)

var (
	ErrNoAccountInContext    = errors.New("no account in context")
	ErrMalformedContextValue = errors.New("malformed context value: internal bug")
)

var contextKey = struct{}{}

type sessionContext struct {
	accountID account.AccountID

	// NOTE: These are the security schemes defined in the OpenAPI spec under
	// `securitySchemes` - they aren't generated by the codegen so be careful.
	securityScheme string
}

func WithAccountID(ctx context.Context, u account.AccountID) context.Context {
	return context.WithValue(ctx, contextKey, sessionContext{
		accountID:      u,
		securityScheme: "browser",
	})
}

func WithAccessKey(ctx context.Context, u account.AccountID) context.Context {
	return context.WithValue(ctx, contextKey, sessionContext{
		accountID:      u,
		securityScheme: "access_key",
	})
}

// GetAccountID pulls out an account ID associated with the call.
func GetAccountID(ctx context.Context) (account.AccountID, error) {
	value := ctx.Value(contextKey)
	if value == nil {
		return account.AccountID{}, fault.Wrap(ErrNoAccountInContext, fctx.With(ctx), ftag.With(ftag.Unauthenticated))
	}

	sc, ok := value.(sessionContext)
	if !ok {
		return account.AccountID{}, fault.Wrap(ErrMalformedContextValue, fctx.With(ctx), ftag.With(ftag.Unauthenticated))
	}

	return sc.accountID, nil
}

func GetSecurityScheme(ctx context.Context) (string, error) {
	value := ctx.Value(contextKey)
	if value == nil {
		return "", fault.Wrap(ErrNoAccountInContext, fctx.With(ctx), ftag.With(ftag.Unauthenticated))
	}

	sc, ok := value.(sessionContext)
	if !ok {
		return "", fault.Wrap(ErrMalformedContextValue, fctx.With(ctx), ftag.With(ftag.Unauthenticated))
	}

	return sc.securityScheme, nil
}

func GetOptAccountID(ctx context.Context) opt.Optional[account.AccountID] {
	value := ctx.Value(contextKey)
	if value == nil {
		return opt.NewEmpty[account.AccountID]()
	}

	sc, ok := value.(sessionContext)
	if !ok {
		return opt.NewEmpty[account.AccountID]()
	}

	return opt.New(sc.accountID)
}

func GetSessionFromMessage[T any](ctx context.Context, msg *pubsub.Message[T]) context.Context {
	actorID, ok := msg.ActorID.Get()
	if !ok {
		return ctx
	}

	return WithAccountID(ctx, account.AccountID(actorID))
}
