// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220906181851-9c600dddea33 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BrowserScopes  = "browser.Scopes"
	WebauthnScopes = "webauthn.Scopes"
)

// APIError A description of an error including a human readable message and any
// related metadata from the request and associated services.
type APIError struct {
	// Error The internal error, not intended for end-user display.
	Error string `json:"error"`

	// Message A human-readable message intended for end-user display.
	Message *string `json:"message,omitempty"`

	// Metadata Any additional metadata related to the error.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Suggested A suggested action for the user.
	Suggested *string `json:"suggested,omitempty"`
}

// Account defines model for Account.
type Account struct {
	Bio       *string `json:"bio,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	Email     *string `json:"email,omitempty"`

	// Id A unique identifier for this resource.
	Id        Identifier `json:"id"`
	Name      *string    `json:"name,omitempty"`
	UpdatedAt *string    `json:"updatedAt,omitempty"`
}

// AccountName The username of an account.
type AccountName = string

// AuthPasswordBody defines model for AuthPasswordBody.
type AuthPasswordBody struct {
	Identifier string `json:"identifier"`
	Token      string `json:"token"`
}

// AuthSuccess defines model for AuthSuccess.
type AuthSuccess struct {
	Id string `json:"id"`
}

// Category defines model for Category.
type Category struct {
	Admin       *bool   `json:"admin,omitempty"`
	Colour      *string `json:"colour,omitempty"`
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id        *Identifier `json:"id,omitempty"`
	Name      *string     `json:"name,omitempty"`
	PostCount *int        `json:"postCount,omitempty"`
	Sort      *int        `json:"sort,omitempty"`
}

// CommonProperties defines model for CommonProperties.
type CommonProperties struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// Identifier A unique identifier for this resource.
type Identifier string

// Post defines model for Post.
type Post struct {
	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// PostBodyMarkdown The body text of a post within a thread.
type PostBodyMarkdown = string

// PostSubmission A post within a thread of posts.
type PostSubmission = Post

// ProfileReference A minimal reference to an account.
type ProfileReference struct {
	// Id A unique identifier for this resource.
	Id *Identifier `json:"id,omitempty"`

	// Name The username of an account.
	Name *AccountName `json:"name,omitempty"`
}

// React defines model for React.
type React struct {
	Emoji *string `json:"emoji,omitempty"`

	// Id A unique identifier for this resource.
	Id *Identifier `json:"id,omitempty"`
}

// Thread defines model for Thread.
type Thread struct {
	// Author A minimal reference to an account.
	Author   ProfileReference `json:"author"`
	Category Category         `json:"category"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool   `json:"pinned"`
	Posts  []Post `json:"posts"`

	// Reacts A list of reactions this post has had from people.
	Reacts []React `json:"reacts"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A URL friendly slug which is prepended with the post ID
	// for uniqueness and sortability.
	Slug *string `json:"slug,omitempty"`

	// Tags A list of tags associated with the thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ThreadReference defines model for ThreadReference.
type ThreadReference struct {
	// Author A minimal reference to an account.
	Author   ProfileReference `json:"author"`
	Category Category         `json:"category"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool `json:"pinned"`

	// Posts The number of posts under this thread.
	Posts *int `json:"posts,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts []React `json:"reacts"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A URL friendly slug which is prepended with the post ID
	// for uniqueness and sortability.
	Slug *string `json:"slug,omitempty"`

	// Tags A list of tags associated with the thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ThreadTags A list of tags for a thread.
type ThreadTags = []string

// ThreadTitle The title of a thread.
type ThreadTitle = string

// ThreadsCreateBody defines model for ThreadsCreateBody.
type ThreadsCreateBody struct {
	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// Category A unique identifier for this resource.
	Category Identifier `json:"category"`

	// Tags A list of tags for a thread.
	Tags ThreadTags `json:"tags"`

	// Title The title of a thread.
	Title ThreadTitle `json:"title"`
}

// AccountHandle defines model for AccountHandle.
type AccountHandle = string

// AccountID A unique identifier for this resource.
type AccountID = Identifier

// ThreadID A unique identifier for this resource.
type ThreadID = Identifier

// AccountsGetSuccess defines model for AccountsGetSuccess.
type AccountsGetSuccess = Account

// InternalServerError A description of an error including a human readable message and any
// related metadata from the request and associated services.
type InternalServerError = APIError

// PostsCreateSuccess A post within a thread of posts.
type PostsCreateSuccess = Post

// ThreadsCreateSuccess defines model for ThreadsCreateSuccess.
type ThreadsCreateSuccess = Thread

// ThreadsGet defines model for ThreadsGet.
type ThreadsGet = Thread

// ThreadsList defines model for ThreadsList.
type ThreadsList = []ThreadReference

// WebAuthnPublicKeyCreationOptions defines model for WebAuthnPublicKeyCreationOptions.
type WebAuthnPublicKeyCreationOptions any

// AuthPassword defines model for AuthPassword.
type AuthPassword = AuthPasswordBody

// PostsCreate A post within a thread of posts.
type PostsCreate = PostSubmission

// ThreadsCreate defines model for ThreadsCreate.
type ThreadsCreate = ThreadsCreateBody

// WebAuthnMakeCredentialJSONBody defines parameters for WebAuthnMakeCredential.
type WebAuthnMakeCredentialJSONBody = map[string]interface{}

// AuthPasswordSigninJSONRequestBody defines body for AuthPasswordSignin for application/json ContentType.
type AuthPasswordSigninJSONRequestBody = AuthPasswordBody

// AuthPasswordSigninFormdataRequestBody defines body for AuthPasswordSignin for application/x-www-form-urlencoded ContentType.
type AuthPasswordSigninFormdataRequestBody = AuthPasswordBody

// AuthPasswordSignupJSONRequestBody defines body for AuthPasswordSignup for application/json ContentType.
type AuthPasswordSignupJSONRequestBody = AuthPasswordBody

// AuthPasswordSignupFormdataRequestBody defines body for AuthPasswordSignup for application/x-www-form-urlencoded ContentType.
type AuthPasswordSignupFormdataRequestBody = AuthPasswordBody

// WebAuthnMakeAssertionJSONRequestBody defines body for WebAuthnMakeAssertion for application/json ContentType.
type WebAuthnMakeAssertionJSONRequestBody = AuthPasswordBody

// WebAuthnMakeAssertionFormdataRequestBody defines body for WebAuthnMakeAssertion for application/x-www-form-urlencoded ContentType.
type WebAuthnMakeAssertionFormdataRequestBody = AuthPasswordBody

// WebAuthnGetAssertionJSONRequestBody defines body for WebAuthnGetAssertion for application/json ContentType.
type WebAuthnGetAssertionJSONRequestBody = AuthPasswordBody

// WebAuthnGetAssertionFormdataRequestBody defines body for WebAuthnGetAssertion for application/x-www-form-urlencoded ContentType.
type WebAuthnGetAssertionFormdataRequestBody = AuthPasswordBody

// WebAuthnMakeCredentialJSONRequestBody defines body for WebAuthnMakeCredential for application/json ContentType.
type WebAuthnMakeCredentialJSONRequestBody = WebAuthnMakeCredentialJSONBody

// ThreadsCreateJSONRequestBody defines body for ThreadsCreate for application/json ContentType.
type ThreadsCreateJSONRequestBody = ThreadsCreateBody

// ThreadsCreateFormdataRequestBody defines body for ThreadsCreate for application/x-www-form-urlencoded ContentType.
type ThreadsCreateFormdataRequestBody = ThreadsCreateBody

// PostsCreateJSONRequestBody defines body for PostsCreate for application/json ContentType.
type PostsCreateJSONRequestBody = PostSubmission

// PostsCreateFormdataRequestBody defines body for PostsCreate for application/x-www-form-urlencoded ContentType.
type PostsCreateFormdataRequestBody = PostSubmission

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the OpenAPI 3.0 specification as JSON.
	// (GET /openapi.json)
	GetSpec(ctx echo.Context) error
	// Get an account by ID.
	// (GET /v1/accounts/{account_id})
	AccountsGet(ctx echo.Context, accountId AccountID) error
	// Sign in to an existing account with a username and password.
	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx echo.Context) error
	// Register a new account with a username and password.
	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx echo.Context) error
	// Complete the credential assertion and sign in to an account.
	// (GET /v1/auth/webauthn/assert)
	WebAuthnMakeAssertion(ctx echo.Context) error
	// Start the WebAuthn assertion for an existing account.
	// (POST /v1/auth/webauthn/assert/{account_handle})
	WebAuthnGetAssertion(ctx echo.Context, accountHandle AccountHandle) error
	// Complete WebAuthn registration by creating a new credential.
	// (GET /v1/auth/webauthn/make)
	WebAuthnMakeCredential(ctx echo.Context) error
	// Start the WebAuthn registration process by requesting a credential.
	// (POST /v1/auth/webauthn/make/{account_handle})
	WebAuthnRequestCredential(ctx echo.Context, accountHandle AccountHandle) error
	// Get a list of all threads.
	// (GET /v1/threads)
	ThreadsList(ctx echo.Context) error
	// Create a new thread within the specified category.
	// (POST /v1/threads)
	ThreadsCreate(ctx echo.Context) error
	// Get information about a thread and the posts within the thread.
	// (GET /v1/threads/{thread_id})
	ThreadsGet(ctx echo.Context, threadId ThreadID) error
	// Create a new post within a thread.
	// (POST /v1/threads/{thread_id}/posts)
	PostsCreate(ctx echo.Context, threadId ThreadID) error
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpec(ctx)
	return err
}

// AccountsGet converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId AccountID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsGet(ctx, accountId)
	return err
}

// AuthPasswordSignin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignin(ctx)
	return err
}

// AuthPasswordSignup converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignup(ctx)
	return err
}

// WebAuthnMakeAssertion converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnMakeAssertion(ctx echo.Context) error {
	var err error

	ctx.Set(WebauthnScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnMakeAssertion(ctx)
	return err
}

// WebAuthnGetAssertion converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnGetAssertion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandle

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnGetAssertion(ctx, accountHandle)
	return err
}

// WebAuthnMakeCredential converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnMakeCredential(ctx echo.Context) error {
	var err error

	ctx.Set(WebauthnScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnMakeCredential(ctx)
	return err
}

// WebAuthnRequestCredential converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnRequestCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandle

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnRequestCredential(ctx, accountHandle)
	return err
}

// ThreadsList converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsList(ctx)
	return err
}

// ThreadsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsCreate(ctx)
	return err
}

// ThreadsGet converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_id" -------------
	var threadId ThreadID

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, ctx.Param("thread_id"), &threadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsGet(ctx, threadId)
	return err
}

// PostsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostsCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_id" -------------
	var threadId ThreadID

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, ctx.Param("thread_id"), &threadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostsCreate(ctx, threadId)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/openapi.json", wrapper.GetSpec)
	router.GET(baseURL+"/v1/accounts/:account_id", wrapper.AccountsGet)
	router.POST(baseURL+"/v1/auth/password/signin", wrapper.AuthPasswordSignin)
	router.POST(baseURL+"/v1/auth/password/signup", wrapper.AuthPasswordSignup)
	router.GET(baseURL+"/v1/auth/webauthn/assert", wrapper.WebAuthnMakeAssertion)
	router.POST(baseURL+"/v1/auth/webauthn/assert/:account_handle", wrapper.WebAuthnGetAssertion)
	router.GET(baseURL+"/v1/auth/webauthn/make", wrapper.WebAuthnMakeCredential)
	router.POST(baseURL+"/v1/auth/webauthn/make/:account_handle", wrapper.WebAuthnRequestCredential)
	router.GET(baseURL+"/v1/threads", wrapper.ThreadsList)
	router.POST(baseURL+"/v1/threads", wrapper.ThreadsCreate)
	router.GET(baseURL+"/v1/threads/:thread_id", wrapper.ThreadsGet)
	router.POST(baseURL+"/v1/threads/:thread_id/posts", wrapper.PostsCreate)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

type AccountsGetSuccessJSONResponse Account

type AuthSuccessResponseHeaders struct {
	SetCookie string
}
type AuthSuccessJSONResponse struct {
	Body AuthSuccess

	Headers AuthSuccessResponseHeaders
}

type BadRequestResponse struct {
}

type InternalServerErrorJSONResponse APIError

type NotFoundResponse struct {
}

type PostsCreateSuccessJSONResponse Post

type ThreadsCreateSuccessJSONResponse Thread

type ThreadsGetJSONResponse Thread

type ThreadsListJSONResponse []ThreadReference

type UnauthorisedResponse struct {
}

type WebAuthnPublicKeyCreationOptionsResponseHeaders struct {
	SetCookie string
}
type WebAuthnPublicKeyCreationOptionsJSONResponse struct {
	Body any

	Headers WebAuthnPublicKeyCreationOptionsResponseHeaders
}

type GetSpecRequestObject struct {
}

type GetSpecResponseObject interface {
	VisitGetSpecResponse(w http.ResponseWriter) error
}

type GetSpec200TextResponse string

func (response GetSpec200TextResponse) VisitGetSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type AccountsGetRequestObject struct {
	AccountId AccountID `json:"account_id"`
}

type AccountsGetResponseObject interface {
	VisitAccountsGetResponse(w http.ResponseWriter) error
}

type AccountsGet200JSONResponse = AccountsGetSuccessJSONResponse

func (response AccountsGet200JSONResponse) VisitAccountsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountsGet401Response = UnauthorisedResponse

func (response AccountsGet401Response) VisitAccountsGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountsGet404Response = NotFoundResponse

func (response AccountsGet404Response) VisitAccountsGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountsGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountsGetdefaultJSONResponse) VisitAccountsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSigninRequestObject struct {
	JSONBody     *AuthPasswordSigninJSONRequestBody
	FormdataBody *AuthPasswordSigninFormdataRequestBody
}

type AuthPasswordSigninResponseObject interface {
	VisitAuthPasswordSigninResponse(w http.ResponseWriter) error
}

type AuthPasswordSignin200JSONResponse = AuthSuccessJSONResponse

func (response AuthPasswordSignin200JSONResponse) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignin401Response = UnauthorisedResponse

func (response AuthPasswordSignin401Response) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthPasswordSignin404Response = NotFoundResponse

func (response AuthPasswordSignin404Response) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthPasswordSignindefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordSignindefaultJSONResponse) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignupRequestObject struct {
	JSONBody     *AuthPasswordSignupJSONRequestBody
	FormdataBody *AuthPasswordSignupFormdataRequestBody
}

type AuthPasswordSignupResponseObject interface {
	VisitAuthPasswordSignupResponse(w http.ResponseWriter) error
}

type AuthPasswordSignup200JSONResponse = AuthSuccessJSONResponse

func (response AuthPasswordSignup200JSONResponse) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignup400Response = BadRequestResponse

func (response AuthPasswordSignup400Response) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthPasswordSignupdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordSignupdefaultJSONResponse) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeAssertionRequestObject struct {
	JSONBody     *WebAuthnMakeAssertionJSONRequestBody
	FormdataBody *WebAuthnMakeAssertionFormdataRequestBody
}

type WebAuthnMakeAssertionResponseObject interface {
	VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error
}

type WebAuthnMakeAssertion200JSONResponse = AuthSuccessJSONResponse

func (response WebAuthnMakeAssertion200JSONResponse) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeAssertion401Response = UnauthorisedResponse

func (response WebAuthnMakeAssertion401Response) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type WebAuthnMakeAssertion404Response = NotFoundResponse

func (response WebAuthnMakeAssertion404Response) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type WebAuthnMakeAssertiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnMakeAssertiondefaultJSONResponse) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnGetAssertionRequestObject struct {
	AccountHandle AccountHandle `json:"account_handle"`
	JSONBody      *WebAuthnGetAssertionJSONRequestBody
	FormdataBody  *WebAuthnGetAssertionFormdataRequestBody
}

type WebAuthnGetAssertionResponseObject interface {
	VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error
}

type WebAuthnGetAssertion200JSONResponse = AuthSuccessJSONResponse

func (response WebAuthnGetAssertion200JSONResponse) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnGetAssertion401Response = UnauthorisedResponse

func (response WebAuthnGetAssertion401Response) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type WebAuthnGetAssertion404Response = NotFoundResponse

func (response WebAuthnGetAssertion404Response) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type WebAuthnGetAssertiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnGetAssertiondefaultJSONResponse) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeCredentialRequestObject struct {
	Body *WebAuthnMakeCredentialJSONRequestBody
}

type WebAuthnMakeCredentialResponseObject interface {
	VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error
}

type WebAuthnMakeCredential200JSONResponse = AuthSuccessJSONResponse

func (response WebAuthnMakeCredential200JSONResponse) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeCredential400Response = BadRequestResponse

func (response WebAuthnMakeCredential400Response) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type WebAuthnMakeCredentialdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnMakeCredentialdefaultJSONResponse) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnRequestCredentialRequestObject struct {
	AccountHandle AccountHandle `json:"account_handle"`
}

type WebAuthnRequestCredentialResponseObject interface {
	VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error
}

type WebAuthnRequestCredential200JSONResponse = WebAuthnPublicKeyCreationOptionsJSONResponse

func (response WebAuthnRequestCredential200JSONResponse) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnRequestCredential400Response = BadRequestResponse

func (response WebAuthnRequestCredential400Response) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type WebAuthnRequestCredentialdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnRequestCredentialdefaultJSONResponse) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadsListRequestObject struct {
}

type ThreadsListResponseObject interface {
	VisitThreadsListResponse(w http.ResponseWriter) error
}

type ThreadsList200JSONResponse = ThreadsListJSONResponse

func (response ThreadsList200JSONResponse) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadsList401Response = UnauthorisedResponse

func (response ThreadsList401Response) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadsList404Response = NotFoundResponse

func (response ThreadsList404Response) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadsListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadsListdefaultJSONResponse) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadsCreateRequestObject struct {
	JSONBody     *ThreadsCreateJSONRequestBody
	FormdataBody *ThreadsCreateFormdataRequestBody
}

type ThreadsCreateResponseObject interface {
	VisitThreadsCreateResponse(w http.ResponseWriter) error
}

type ThreadsCreate200JSONResponse = ThreadsCreateSuccessJSONResponse

func (response ThreadsCreate200JSONResponse) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadsCreate401Response = UnauthorisedResponse

func (response ThreadsCreate401Response) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadsCreate404Response = NotFoundResponse

func (response ThreadsCreate404Response) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadsCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadsCreatedefaultJSONResponse) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadsGetRequestObject struct {
	ThreadId ThreadID `json:"thread_id"`
}

type ThreadsGetResponseObject interface {
	VisitThreadsGetResponse(w http.ResponseWriter) error
}

type ThreadsGet200JSONResponse = ThreadsGetJSONResponse

func (response ThreadsGet200JSONResponse) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadsGet401Response = UnauthorisedResponse

func (response ThreadsGet401Response) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadsGet404Response = NotFoundResponse

func (response ThreadsGet404Response) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadsGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadsGetdefaultJSONResponse) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostsCreateRequestObject struct {
	ThreadId     ThreadID `json:"thread_id"`
	JSONBody     *PostsCreateJSONRequestBody
	FormdataBody *PostsCreateFormdataRequestBody
}

type PostsCreateResponseObject interface {
	VisitPostsCreateResponse(w http.ResponseWriter) error
}

type PostsCreate200JSONResponse = PostsCreateSuccessJSONResponse

func (response PostsCreate200JSONResponse) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostsCreate401Response = UnauthorisedResponse

func (response PostsCreate401Response) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostsCreate404Response = NotFoundResponse

func (response PostsCreate404Response) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostsCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PostsCreatedefaultJSONResponse) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200TextResponse string

func (response GetVersion200TextResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the OpenAPI 3.0 specification as JSON.
	// (GET /openapi.json)
	GetSpec(ctx context.Context, request GetSpecRequestObject) (GetSpecResponseObject, error)
	// Get an account by ID.
	// (GET /v1/accounts/{account_id})
	AccountsGet(ctx context.Context, request AccountsGetRequestObject) (AccountsGetResponseObject, error)
	// Sign in to an existing account with a username and password.
	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx context.Context, request AuthPasswordSigninRequestObject) (AuthPasswordSigninResponseObject, error)
	// Register a new account with a username and password.
	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx context.Context, request AuthPasswordSignupRequestObject) (AuthPasswordSignupResponseObject, error)
	// Complete the credential assertion and sign in to an account.
	// (GET /v1/auth/webauthn/assert)
	WebAuthnMakeAssertion(ctx context.Context, request WebAuthnMakeAssertionRequestObject) (WebAuthnMakeAssertionResponseObject, error)
	// Start the WebAuthn assertion for an existing account.
	// (POST /v1/auth/webauthn/assert/{account_handle})
	WebAuthnGetAssertion(ctx context.Context, request WebAuthnGetAssertionRequestObject) (WebAuthnGetAssertionResponseObject, error)
	// Complete WebAuthn registration by creating a new credential.
	// (GET /v1/auth/webauthn/make)
	WebAuthnMakeCredential(ctx context.Context, request WebAuthnMakeCredentialRequestObject) (WebAuthnMakeCredentialResponseObject, error)
	// Start the WebAuthn registration process by requesting a credential.
	// (POST /v1/auth/webauthn/make/{account_handle})
	WebAuthnRequestCredential(ctx context.Context, request WebAuthnRequestCredentialRequestObject) (WebAuthnRequestCredentialResponseObject, error)
	// Get a list of all threads.
	// (GET /v1/threads)
	ThreadsList(ctx context.Context, request ThreadsListRequestObject) (ThreadsListResponseObject, error)
	// Create a new thread within the specified category.
	// (POST /v1/threads)
	ThreadsCreate(ctx context.Context, request ThreadsCreateRequestObject) (ThreadsCreateResponseObject, error)
	// Get information about a thread and the posts within the thread.
	// (GET /v1/threads/{thread_id})
	ThreadsGet(ctx context.Context, request ThreadsGetRequestObject) (ThreadsGetResponseObject, error)
	// Create a new post within a thread.
	// (POST /v1/threads/{thread_id}/posts)
	PostsCreate(ctx context.Context, request PostsCreateRequestObject) (PostsCreateResponseObject, error)
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetSpec operation middleware
func (sh *strictHandler) GetSpec(ctx echo.Context) error {
	var request GetSpecRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSpec(ctx.Request().Context(), request.(GetSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpec")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSpecResponseObject); ok {
		return validResponse.VisitGetSpecResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountsGet operation middleware
func (sh *strictHandler) AccountsGet(ctx echo.Context, accountId AccountID) error {
	var request AccountsGetRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsGet(ctx.Request().Context(), request.(AccountsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsGetResponseObject); ok {
		return validResponse.VisitAccountsGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordSignin operation middleware
func (sh *strictHandler) AuthPasswordSignin(ctx echo.Context) error {
	var request AuthPasswordSigninRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AuthPasswordSigninJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AuthPasswordSigninFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordSignin(ctx.Request().Context(), request.(AuthPasswordSigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordSigninResponseObject); ok {
		return validResponse.VisitAuthPasswordSigninResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordSignup operation middleware
func (sh *strictHandler) AuthPasswordSignup(ctx echo.Context) error {
	var request AuthPasswordSignupRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AuthPasswordSignupJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AuthPasswordSignupFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordSignup(ctx.Request().Context(), request.(AuthPasswordSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordSignupResponseObject); ok {
		return validResponse.VisitAuthPasswordSignupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnMakeAssertion operation middleware
func (sh *strictHandler) WebAuthnMakeAssertion(ctx echo.Context) error {
	var request WebAuthnMakeAssertionRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body WebAuthnMakeAssertionJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body WebAuthnMakeAssertionFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnMakeAssertion(ctx.Request().Context(), request.(WebAuthnMakeAssertionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnMakeAssertion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnMakeAssertionResponseObject); ok {
		return validResponse.VisitWebAuthnMakeAssertionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnGetAssertion operation middleware
func (sh *strictHandler) WebAuthnGetAssertion(ctx echo.Context, accountHandle AccountHandle) error {
	var request WebAuthnGetAssertionRequestObject

	request.AccountHandle = accountHandle
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body WebAuthnGetAssertionJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body WebAuthnGetAssertionFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnGetAssertion(ctx.Request().Context(), request.(WebAuthnGetAssertionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnGetAssertion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnGetAssertionResponseObject); ok {
		return validResponse.VisitWebAuthnGetAssertionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnMakeCredential operation middleware
func (sh *strictHandler) WebAuthnMakeCredential(ctx echo.Context) error {
	var request WebAuthnMakeCredentialRequestObject

	var body WebAuthnMakeCredentialJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnMakeCredential(ctx.Request().Context(), request.(WebAuthnMakeCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnMakeCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnMakeCredentialResponseObject); ok {
		return validResponse.VisitWebAuthnMakeCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnRequestCredential operation middleware
func (sh *strictHandler) WebAuthnRequestCredential(ctx echo.Context, accountHandle AccountHandle) error {
	var request WebAuthnRequestCredentialRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnRequestCredential(ctx.Request().Context(), request.(WebAuthnRequestCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnRequestCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnRequestCredentialResponseObject); ok {
		return validResponse.VisitWebAuthnRequestCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadsList operation middleware
func (sh *strictHandler) ThreadsList(ctx echo.Context) error {
	var request ThreadsListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadsList(ctx.Request().Context(), request.(ThreadsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadsListResponseObject); ok {
		return validResponse.VisitThreadsListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadsCreate operation middleware
func (sh *strictHandler) ThreadsCreate(ctx echo.Context) error {
	var request ThreadsCreateRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body ThreadsCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body ThreadsCreateFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadsCreate(ctx.Request().Context(), request.(ThreadsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadsCreateResponseObject); ok {
		return validResponse.VisitThreadsCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadsGet operation middleware
func (sh *strictHandler) ThreadsGet(ctx echo.Context, threadId ThreadID) error {
	var request ThreadsGetRequestObject

	request.ThreadId = threadId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadsGet(ctx.Request().Context(), request.(ThreadsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadsGetResponseObject); ok {
		return validResponse.VisitThreadsGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostsCreate operation middleware
func (sh *strictHandler) PostsCreate(ctx echo.Context, threadId ThreadID) error {
	var request PostsCreateRequestObject

	request.ThreadId = threadId
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body PostsCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body PostsCreateFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostsCreate(ctx.Request().Context(), request.(PostsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostsCreateResponseObject); ok {
		return validResponse.VisitPostsCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx echo.Context) error {
	var request GetVersionRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx.Request().Context(), request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		return validResponse.VisitGetVersionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
