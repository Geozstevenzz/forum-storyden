// Code generated by entc, DO NOT EDIT.

package authentication

import (
	"time"
)

const (
	// Label holds the string label denoting the authentication type in the database.
	Label = "authentication"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldService holds the string denoting the service field in the database.
	FieldService = "service"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the authentication in the database.
	Table = "authentications"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "authentications"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_authentication"
)

// Columns holds all SQL columns for authentication fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldService,
	FieldIdentifier,
	FieldToken,
	FieldMetadata,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "authentications"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_authentication",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// ServiceValidator is a validator for the "service" field. It is called by the builders before save.
	ServiceValidator func(string) error
	// TokenValidator is a validator for the "token" field. It is called by the builders before save.
	TokenValidator func(string) error
)
