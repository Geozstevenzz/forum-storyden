// Code generated by enumerator. DO NOT EDIT.

package library

import (
	"database/sql/driver"
	"fmt"
)

type PropertyType struct {
	v propertyTypeEnum
}

var (
	PropertyTypeEnumText      = PropertyType{propertyTypeEnumText}
	PropertyTypeEnumNumber    = PropertyType{propertyTypeEnumNumber}
	PropertyTypeEnumTimestamp = PropertyType{propertyTypeEnumTimestamp}
	PropertyTypeEnumBoolean   = PropertyType{propertyTypeEnumBoolean}
)

func (r PropertyType) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r PropertyType) String() string {
	return string(r.v)
}
func (r PropertyType) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *PropertyType) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewPropertyType(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r PropertyType) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *PropertyType) Scan(__iNpUt__ any) error {
	s, err := NewPropertyType(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewPropertyType(__iNpUt__ string) (PropertyType, error) {
	switch __iNpUt__ {
	case string(propertyTypeEnumText):
		return PropertyTypeEnumText, nil
	case string(propertyTypeEnumNumber):
		return PropertyTypeEnumNumber, nil
	case string(propertyTypeEnumTimestamp):
		return PropertyTypeEnumTimestamp, nil
	case string(propertyTypeEnumBoolean):
		return PropertyTypeEnumBoolean, nil
	default:
		return PropertyType{}, fmt.Errorf("invalid value for type 'PropertyType': '%s'", __iNpUt__)
	}
}
