// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220728213615-b9782fb00949 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BrowserScopes  = "browser.Scopes"
	WebauthnScopes = "webauthn.Scopes"
)

// APIError A description of an error including a human readable message.
type APIError struct {
	Error                string                 `json:"error"`
	Message              *string                `json:"message,omitempty"`
	Suggested            *string                `json:"suggested,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Account defines model for Account.
type Account struct {
	Bio       *string `json:"bio,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	Email     *string `json:"email,omitempty"`

	// Id A unique identifier for this resource.
	Id        Identifier `json:"id"`
	Name      *string    `json:"name,omitempty"`
	UpdatedAt *string    `json:"updatedAt,omitempty"`
}

// AccountName The username of an account.
type AccountName = string

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Identifier string `json:"identifier"`
	Token      string `json:"token"`
}

// AuthSuccess defines model for AuthSuccess.
type AuthSuccess struct {
	Id string `json:"id"`
}

// Category defines model for Category.
type Category struct {
	Admin       *bool   `json:"admin,omitempty"`
	Colour      *string `json:"colour,omitempty"`
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id        *Identifier `json:"id,omitempty"`
	Name      *string     `json:"name,omitempty"`
	PostCount *int        `json:"postCount,omitempty"`
	Sort      *int        `json:"sort,omitempty"`
}

// CommonProperties defines model for CommonProperties.
type CommonProperties struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// Identifier A unique identifier for this resource.
type Identifier string

// Post defines model for Post.
type Post struct {
	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// PostBodyMarkdown The body text of a post within a thread.
type PostBodyMarkdown = string

// PostSubmission A post within a thread of posts.
type PostSubmission = Post

// ProfileReference A minimal reference to an account.
type ProfileReference struct {
	// Id A unique identifier for this resource.
	Id *Identifier `json:"id,omitempty"`

	// Name The username of an account.
	Name *AccountName `json:"name,omitempty"`
}

// React defines model for React.
type React struct {
	Emoji *string `json:"emoji,omitempty"`

	// Id A unique identifier for this resource.
	Id *Identifier `json:"id,omitempty"`
}

// Thread defines model for Thread.
type Thread struct {
	// Author A minimal reference to an account.
	Author   ProfileReference `json:"author"`
	Category Category         `json:"category"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool   `json:"pinned"`
	Posts  []Post `json:"posts"`

	// Reacts A list of reactions this post has had from people.
	Reacts []React `json:"reacts"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A URL friendly slug which is prepended with the post ID
	// for uniqueness and sortability.
	Slug *string `json:"slug,omitempty"`

	// Tags A list of tags associated with the thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ThreadReference defines model for ThreadReference.
type ThreadReference struct {
	// Author A minimal reference to an account.
	Author   ProfileReference `json:"author"`
	Category Category         `json:"category"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool `json:"pinned"`

	// Posts The number of posts under this thread.
	Posts *int `json:"posts,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts []React `json:"reacts"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A URL friendly slug which is prepended with the post ID
	// for uniqueness and sortability.
	Slug *string `json:"slug,omitempty"`

	// Tags A list of tags associated with the thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ThreadSubmission defines model for ThreadSubmission.
type ThreadSubmission struct {
	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// Category A unique identifier for this resource.
	Category Identifier `json:"category"`

	// Tags A list of tags for a thread.
	Tags ThreadTags `json:"tags"`

	// Title The title of a thread.
	Title ThreadTitle `json:"title"`
}

// ThreadTags A list of tags for a thread.
type ThreadTags = []string

// ThreadTitle The title of a thread.
type ThreadTitle = string

// AccountHandle defines model for AccountHandle.
type AccountHandle = string

// AccountID A unique identifier for this resource.
type AccountID = Identifier

// ThreadID A unique identifier for this resource.
type ThreadID = Identifier

// AccountsGetSuccess defines model for AccountsGetSuccess.
type AccountsGetSuccess = Account

// InternalServerError A description of an error including a human readable message.
type InternalServerError = APIError

// PostsCreateSuccess A post within a thread of posts.
type PostsCreateSuccess = Post

// ThreadsCreateSuccess defines model for ThreadsCreateSuccess.
type ThreadsCreateSuccess = Thread

// ThreadsGet defines model for ThreadsGet.
type ThreadsGet = Thread

// ThreadsList defines model for ThreadsList.
type ThreadsList = []ThreadReference

// WebAuthnPublicKeyCreationOptions defines model for WebAuthnPublicKeyCreationOptions.
type WebAuthnPublicKeyCreationOptions any

// AuthPassword defines model for AuthPassword.
type AuthPassword = AuthRequest

// PostsCreate A post within a thread of posts.
type PostsCreate = PostSubmission

// ThreadsCreate defines model for ThreadsCreate.
type ThreadsCreate = ThreadSubmission

// WebAuthnMakeCredentialJSONBody defines parameters for WebAuthnMakeCredential.
type WebAuthnMakeCredentialJSONBody = map[string]interface{}

// AuthPasswordSigninJSONRequestBody defines body for AuthPasswordSignin for application/json ContentType.
type AuthPasswordSigninJSONRequestBody = AuthRequest

// AuthPasswordSigninFormdataRequestBody defines body for AuthPasswordSignin for application/x-www-form-urlencoded ContentType.
type AuthPasswordSigninFormdataRequestBody = AuthRequest

// AuthPasswordSignupJSONRequestBody defines body for AuthPasswordSignup for application/json ContentType.
type AuthPasswordSignupJSONRequestBody = AuthRequest

// AuthPasswordSignupFormdataRequestBody defines body for AuthPasswordSignup for application/x-www-form-urlencoded ContentType.
type AuthPasswordSignupFormdataRequestBody = AuthRequest

// WebAuthnMakeAssertionJSONRequestBody defines body for WebAuthnMakeAssertion for application/json ContentType.
type WebAuthnMakeAssertionJSONRequestBody = AuthRequest

// WebAuthnMakeAssertionFormdataRequestBody defines body for WebAuthnMakeAssertion for application/x-www-form-urlencoded ContentType.
type WebAuthnMakeAssertionFormdataRequestBody = AuthRequest

// WebAuthnGetAssertionJSONRequestBody defines body for WebAuthnGetAssertion for application/json ContentType.
type WebAuthnGetAssertionJSONRequestBody = AuthRequest

// WebAuthnGetAssertionFormdataRequestBody defines body for WebAuthnGetAssertion for application/x-www-form-urlencoded ContentType.
type WebAuthnGetAssertionFormdataRequestBody = AuthRequest

// WebAuthnMakeCredentialJSONRequestBody defines body for WebAuthnMakeCredential for application/json ContentType.
type WebAuthnMakeCredentialJSONRequestBody = WebAuthnMakeCredentialJSONBody

// ThreadsCreateJSONRequestBody defines body for ThreadsCreate for application/json ContentType.
type ThreadsCreateJSONRequestBody = ThreadSubmission

// ThreadsCreateFormdataRequestBody defines body for ThreadsCreate for application/x-www-form-urlencoded ContentType.
type ThreadsCreateFormdataRequestBody = ThreadSubmission

// PostsCreateJSONRequestBody defines body for PostsCreate for application/json ContentType.
type PostsCreateJSONRequestBody = PostSubmission

// PostsCreateFormdataRequestBody defines body for PostsCreate for application/x-www-form-urlencoded ContentType.
type PostsCreateFormdataRequestBody = PostSubmission

// Getter for additional properties for APIError. Returns the specified
// element and whether it was found
func (a APIError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for APIError
func (a *APIError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for APIError to handle AdditionalProperties
func (a *APIError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["message"]; found {
		err = json.Unmarshal(raw, &a.Message)
		if err != nil {
			return fmt.Errorf("error reading 'message': %w", err)
		}
		delete(object, "message")
	}

	if raw, found := object["suggested"]; found {
		err = json.Unmarshal(raw, &a.Suggested)
		if err != nil {
			return fmt.Errorf("error reading 'suggested': %w", err)
		}
		delete(object, "suggested")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for APIError to handle AdditionalProperties
func (a APIError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if a.Message != nil {
		object["message"], err = json.Marshal(a.Message)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'message': %w", err)
		}
	}

	if a.Suggested != nil {
		object["suggested"], err = json.Marshal(a.Suggested)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suggested': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the OpenAPI 3.0 specification as JSON.
	// (GET /openapi.json)
	GetSpec(ctx echo.Context) error
	// Get an account by ID.
	// (GET /v1/accounts/{account_id})
	AccountsGet(ctx echo.Context, accountId AccountID) error
	// Sign in to an existing account with a username and password.
	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx echo.Context) error
	// Register a new account with a username and password.
	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx echo.Context) error
	// Complete the credential assertion and sign in to an account.
	// (GET /v1/auth/webauthn/assert)
	WebAuthnMakeAssertion(ctx echo.Context) error
	// Start the WebAuthn assertion for an existing account.
	// (POST /v1/auth/webauthn/assert/{account_handle})
	WebAuthnGetAssertion(ctx echo.Context, accountHandle AccountHandle) error
	// Complete WebAuthn registration by creating a new credential.
	// (GET /v1/auth/webauthn/make)
	WebAuthnMakeCredential(ctx echo.Context) error
	// Start the WebAuthn registration process by requesting a credential.
	// (POST /v1/auth/webauthn/make/{account_handle})
	WebAuthnRequestCredential(ctx echo.Context, accountHandle AccountHandle) error
	// Get a list of all threads.
	// (GET /v1/threads)
	ThreadsList(ctx echo.Context) error
	// Create a new thread within the specified category.
	// (POST /v1/threads)
	ThreadsCreate(ctx echo.Context) error
	// Get information about a thread and the posts within the thread.
	// (GET /v1/threads/{thread_id})
	ThreadsGet(ctx echo.Context, threadId ThreadID) error
	// Create a new post within a thread.
	// (POST /v1/threads/{thread_id}/posts)
	PostsCreate(ctx echo.Context, threadId ThreadID) error
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpec(ctx)
	return err
}

// AccountsGet converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId AccountID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsGet(ctx, accountId)
	return err
}

// AuthPasswordSignin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignin(ctx)
	return err
}

// AuthPasswordSignup converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignup(ctx)
	return err
}

// WebAuthnMakeAssertion converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnMakeAssertion(ctx echo.Context) error {
	var err error

	ctx.Set(WebauthnScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnMakeAssertion(ctx)
	return err
}

// WebAuthnGetAssertion converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnGetAssertion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandle

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnGetAssertion(ctx, accountHandle)
	return err
}

// WebAuthnMakeCredential converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnMakeCredential(ctx echo.Context) error {
	var err error

	ctx.Set(WebauthnScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnMakeCredential(ctx)
	return err
}

// WebAuthnRequestCredential converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnRequestCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandle

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnRequestCredential(ctx, accountHandle)
	return err
}

// ThreadsList converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsList(ctx)
	return err
}

// ThreadsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsCreate(ctx)
	return err
}

// ThreadsGet converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_id" -------------
	var threadId ThreadID

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, ctx.Param("thread_id"), &threadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsGet(ctx, threadId)
	return err
}

// PostsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostsCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_id" -------------
	var threadId ThreadID

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, ctx.Param("thread_id"), &threadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostsCreate(ctx, threadId)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/openapi.json", wrapper.GetSpec)
	router.GET(baseURL+"/v1/accounts/:account_id", wrapper.AccountsGet)
	router.POST(baseURL+"/v1/auth/password/signin", wrapper.AuthPasswordSignin)
	router.POST(baseURL+"/v1/auth/password/signup", wrapper.AuthPasswordSignup)
	router.GET(baseURL+"/v1/auth/webauthn/assert", wrapper.WebAuthnMakeAssertion)
	router.POST(baseURL+"/v1/auth/webauthn/assert/:account_handle", wrapper.WebAuthnGetAssertion)
	router.GET(baseURL+"/v1/auth/webauthn/make", wrapper.WebAuthnMakeCredential)
	router.POST(baseURL+"/v1/auth/webauthn/make/:account_handle", wrapper.WebAuthnRequestCredential)
	router.GET(baseURL+"/v1/threads", wrapper.ThreadsList)
	router.POST(baseURL+"/v1/threads", wrapper.ThreadsCreate)
	router.GET(baseURL+"/v1/threads/:thread_id", wrapper.ThreadsGet)
	router.POST(baseURL+"/v1/threads/:thread_id/posts", wrapper.PostsCreate)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

type AccountsGetSuccessJSONResponse Account

func (t AccountsGetSuccessJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((Account)(t))
}

type AuthSuccessResponseHeaders struct {
	SetCookie string
}
type AuthSuccessJSONResponse struct {
	Body AuthSuccess

	Headers AuthSuccessResponseHeaders
}

func (t AuthSuccessJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type BadRequestResponse struct {
}

type InternalServerErrorJSONResponse APIError

func (t InternalServerErrorJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((APIError)(t))
}

type NotFoundResponse struct {
}

type PostsCreateSuccessJSONResponse Post

func (t PostsCreateSuccessJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((Post)(t))
}

type ThreadsCreateSuccessJSONResponse Thread

func (t ThreadsCreateSuccessJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((Thread)(t))
}

type ThreadsGetJSONResponse Thread

func (t ThreadsGetJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((Thread)(t))
}

type ThreadsListJSONResponse []ThreadReference

func (t ThreadsListJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(([]ThreadReference)(t))
}

type UnauthorisedResponse struct {
}

type WebAuthnPublicKeyCreationOptionsResponseHeaders struct {
	SetCookie string
}
type WebAuthnPublicKeyCreationOptionsJSONResponse struct {
	Body any

	Headers WebAuthnPublicKeyCreationOptionsResponseHeaders
}

func (t WebAuthnPublicKeyCreationOptionsJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type GetSpecRequestObject struct {
}

type GetSpec200TextResponse string

type AccountsGetRequestObject struct {
	AccountId AccountID `json:"account_id"`
}

type AccountsGet200JSONResponse = AccountsGetSuccessJSONResponse

type AccountsGet401Response = UnauthorisedResponse

type AccountsGet404Response = NotFoundResponse

type AccountsGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t AccountsGetdefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type AuthPasswordSigninRequestObject struct {
	JSONBody     *AuthPasswordSigninJSONRequestBody
	FormdataBody *AuthPasswordSigninFormdataRequestBody
}

type AuthPasswordSignin200JSONResponse = AuthSuccessJSONResponse

type AuthPasswordSignin401Response = UnauthorisedResponse

type AuthPasswordSignin404Response = NotFoundResponse

type AuthPasswordSignindefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t AuthPasswordSignindefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type AuthPasswordSignupRequestObject struct {
	JSONBody     *AuthPasswordSignupJSONRequestBody
	FormdataBody *AuthPasswordSignupFormdataRequestBody
}

type AuthPasswordSignup200JSONResponse = AuthSuccessJSONResponse

type AuthPasswordSignup400Response = BadRequestResponse

type AuthPasswordSignupdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t AuthPasswordSignupdefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type WebAuthnMakeAssertionRequestObject struct {
	JSONBody     *WebAuthnMakeAssertionJSONRequestBody
	FormdataBody *WebAuthnMakeAssertionFormdataRequestBody
}

type WebAuthnMakeAssertion200JSONResponse = AuthSuccessJSONResponse

type WebAuthnMakeAssertion401Response = UnauthorisedResponse

type WebAuthnMakeAssertion404Response = NotFoundResponse

type WebAuthnMakeAssertiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t WebAuthnMakeAssertiondefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type WebAuthnGetAssertionRequestObject struct {
	AccountHandle AccountHandle `json:"account_handle"`
	JSONBody      *WebAuthnGetAssertionJSONRequestBody
	FormdataBody  *WebAuthnGetAssertionFormdataRequestBody
}

type WebAuthnGetAssertion200JSONResponse = AuthSuccessJSONResponse

type WebAuthnGetAssertion401Response = UnauthorisedResponse

type WebAuthnGetAssertion404Response = NotFoundResponse

type WebAuthnGetAssertiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t WebAuthnGetAssertiondefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type WebAuthnMakeCredentialRequestObject struct {
	Body *WebAuthnMakeCredentialJSONRequestBody
}

type WebAuthnMakeCredential200JSONResponse = AuthSuccessJSONResponse

type WebAuthnMakeCredential400Response = BadRequestResponse

type WebAuthnMakeCredentialdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t WebAuthnMakeCredentialdefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type WebAuthnRequestCredentialRequestObject struct {
	AccountHandle AccountHandle `json:"account_handle"`
}

type WebAuthnRequestCredential200JSONResponse = WebAuthnPublicKeyCreationOptionsJSONResponse

type WebAuthnRequestCredential400Response = BadRequestResponse

type WebAuthnRequestCredentialdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t WebAuthnRequestCredentialdefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type ThreadsListRequestObject struct {
}

type ThreadsList200JSONResponse = ThreadsListJSONResponse

type ThreadsList401Response = UnauthorisedResponse

type ThreadsList404Response = NotFoundResponse

type ThreadsListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t ThreadsListdefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type ThreadsCreateRequestObject struct {
	JSONBody     *ThreadsCreateJSONRequestBody
	FormdataBody *ThreadsCreateFormdataRequestBody
}

type ThreadsCreate200JSONResponse = ThreadsCreateSuccessJSONResponse

type ThreadsCreate401Response = UnauthorisedResponse

type ThreadsCreate404Response = NotFoundResponse

type ThreadsCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t ThreadsCreatedefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type ThreadsGetRequestObject struct {
	ThreadId ThreadID `json:"thread_id"`
}

type ThreadsGet200JSONResponse = ThreadsGetJSONResponse

type ThreadsGet401Response = UnauthorisedResponse

type ThreadsGet404Response = NotFoundResponse

type ThreadsGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t ThreadsGetdefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type PostsCreateRequestObject struct {
	ThreadId     ThreadID `json:"thread_id"`
	JSONBody     *PostsCreateJSONRequestBody
	FormdataBody *PostsCreateFormdataRequestBody
}

type PostsCreate200JSONResponse = PostsCreateSuccessJSONResponse

type PostsCreate401Response = UnauthorisedResponse

type PostsCreate404Response = NotFoundResponse

type PostsCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t PostsCreatedefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type GetVersionRequestObject struct {
}

type GetVersion200TextResponse string

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the OpenAPI 3.0 specification as JSON.
	// (GET /openapi.json)
	GetSpec(ctx context.Context, request GetSpecRequestObject) interface{}
	// Get an account by ID.
	// (GET /v1/accounts/{account_id})
	AccountsGet(ctx context.Context, request AccountsGetRequestObject) interface{}
	// Sign in to an existing account with a username and password.
	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx context.Context, request AuthPasswordSigninRequestObject) interface{}
	// Register a new account with a username and password.
	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx context.Context, request AuthPasswordSignupRequestObject) interface{}
	// Complete the credential assertion and sign in to an account.
	// (GET /v1/auth/webauthn/assert)
	WebAuthnMakeAssertion(ctx context.Context, request WebAuthnMakeAssertionRequestObject) interface{}
	// Start the WebAuthn assertion for an existing account.
	// (POST /v1/auth/webauthn/assert/{account_handle})
	WebAuthnGetAssertion(ctx context.Context, request WebAuthnGetAssertionRequestObject) interface{}
	// Complete WebAuthn registration by creating a new credential.
	// (GET /v1/auth/webauthn/make)
	WebAuthnMakeCredential(ctx context.Context, request WebAuthnMakeCredentialRequestObject) interface{}
	// Start the WebAuthn registration process by requesting a credential.
	// (POST /v1/auth/webauthn/make/{account_handle})
	WebAuthnRequestCredential(ctx context.Context, request WebAuthnRequestCredentialRequestObject) interface{}
	// Get a list of all threads.
	// (GET /v1/threads)
	ThreadsList(ctx context.Context, request ThreadsListRequestObject) interface{}
	// Create a new thread within the specified category.
	// (POST /v1/threads)
	ThreadsCreate(ctx context.Context, request ThreadsCreateRequestObject) interface{}
	// Get information about a thread and the posts within the thread.
	// (GET /v1/threads/{thread_id})
	ThreadsGet(ctx context.Context, request ThreadsGetRequestObject) interface{}
	// Create a new post within a thread.
	// (POST /v1/threads/{thread_id}/posts)
	PostsCreate(ctx context.Context, request PostsCreateRequestObject) interface{}
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) interface{}
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) interface{}

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetSpec operation middleware
func (sh *strictHandler) GetSpec(ctx echo.Context) error {
	var request GetSpecRequestObject

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.GetSpec(ctx.Request().Context(), request.(GetSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpec")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case GetSpec200TextResponse:
		return ctx.Blob(200, "text/plain", []byte(v))
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// AccountsGet operation middleware
func (sh *strictHandler) AccountsGet(ctx echo.Context, accountId AccountID) error {
	var request AccountsGetRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.AccountsGet(ctx.Request().Context(), request.(AccountsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsGet")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case AccountsGet200JSONResponse:
		return ctx.JSON(200, v)
	case AccountsGet401Response:
		return ctx.NoContent(401)
	case AccountsGet404Response:
		return ctx.NoContent(404)
	case AccountsGetdefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// AuthPasswordSignin operation middleware
func (sh *strictHandler) AuthPasswordSignin(ctx echo.Context) error {
	var request AuthPasswordSigninRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AuthPasswordSigninJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AuthPasswordSigninFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.AuthPasswordSignin(ctx.Request().Context(), request.(AuthPasswordSigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignin")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case AuthPasswordSignin200JSONResponse:
		ctx.Response().Header().Set("Set-Cookie", fmt.Sprint(v.Headers.SetCookie))
		return ctx.JSON(200, v)
	case AuthPasswordSignin401Response:
		return ctx.NoContent(401)
	case AuthPasswordSignin404Response:
		return ctx.NoContent(404)
	case AuthPasswordSignindefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// AuthPasswordSignup operation middleware
func (sh *strictHandler) AuthPasswordSignup(ctx echo.Context) error {
	var request AuthPasswordSignupRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AuthPasswordSignupJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AuthPasswordSignupFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.AuthPasswordSignup(ctx.Request().Context(), request.(AuthPasswordSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignup")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case AuthPasswordSignup200JSONResponse:
		ctx.Response().Header().Set("Set-Cookie", fmt.Sprint(v.Headers.SetCookie))
		return ctx.JSON(200, v)
	case AuthPasswordSignup400Response:
		return ctx.NoContent(400)
	case AuthPasswordSignupdefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// WebAuthnMakeAssertion operation middleware
func (sh *strictHandler) WebAuthnMakeAssertion(ctx echo.Context) error {
	var request WebAuthnMakeAssertionRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body WebAuthnMakeAssertionJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body WebAuthnMakeAssertionFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.WebAuthnMakeAssertion(ctx.Request().Context(), request.(WebAuthnMakeAssertionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnMakeAssertion")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case WebAuthnMakeAssertion200JSONResponse:
		ctx.Response().Header().Set("Set-Cookie", fmt.Sprint(v.Headers.SetCookie))
		return ctx.JSON(200, v)
	case WebAuthnMakeAssertion401Response:
		return ctx.NoContent(401)
	case WebAuthnMakeAssertion404Response:
		return ctx.NoContent(404)
	case WebAuthnMakeAssertiondefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// WebAuthnGetAssertion operation middleware
func (sh *strictHandler) WebAuthnGetAssertion(ctx echo.Context, accountHandle AccountHandle) error {
	var request WebAuthnGetAssertionRequestObject

	request.AccountHandle = accountHandle
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body WebAuthnGetAssertionJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body WebAuthnGetAssertionFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.WebAuthnGetAssertion(ctx.Request().Context(), request.(WebAuthnGetAssertionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnGetAssertion")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case WebAuthnGetAssertion200JSONResponse:
		ctx.Response().Header().Set("Set-Cookie", fmt.Sprint(v.Headers.SetCookie))
		return ctx.JSON(200, v)
	case WebAuthnGetAssertion401Response:
		return ctx.NoContent(401)
	case WebAuthnGetAssertion404Response:
		return ctx.NoContent(404)
	case WebAuthnGetAssertiondefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// WebAuthnMakeCredential operation middleware
func (sh *strictHandler) WebAuthnMakeCredential(ctx echo.Context) error {
	var request WebAuthnMakeCredentialRequestObject

	var body WebAuthnMakeCredentialJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.WebAuthnMakeCredential(ctx.Request().Context(), request.(WebAuthnMakeCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnMakeCredential")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case WebAuthnMakeCredential200JSONResponse:
		ctx.Response().Header().Set("Set-Cookie", fmt.Sprint(v.Headers.SetCookie))
		return ctx.JSON(200, v)
	case WebAuthnMakeCredential400Response:
		return ctx.NoContent(400)
	case WebAuthnMakeCredentialdefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// WebAuthnRequestCredential operation middleware
func (sh *strictHandler) WebAuthnRequestCredential(ctx echo.Context, accountHandle AccountHandle) error {
	var request WebAuthnRequestCredentialRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.WebAuthnRequestCredential(ctx.Request().Context(), request.(WebAuthnRequestCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnRequestCredential")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case WebAuthnRequestCredential200JSONResponse:
		ctx.Response().Header().Set("Set-Cookie", fmt.Sprint(v.Headers.SetCookie))
		return ctx.JSON(200, v)
	case WebAuthnRequestCredential400Response:
		return ctx.NoContent(400)
	case WebAuthnRequestCredentialdefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// ThreadsList operation middleware
func (sh *strictHandler) ThreadsList(ctx echo.Context) error {
	var request ThreadsListRequestObject

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.ThreadsList(ctx.Request().Context(), request.(ThreadsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsList")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case ThreadsList200JSONResponse:
		return ctx.JSON(200, v)
	case ThreadsList401Response:
		return ctx.NoContent(401)
	case ThreadsList404Response:
		return ctx.NoContent(404)
	case ThreadsListdefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// ThreadsCreate operation middleware
func (sh *strictHandler) ThreadsCreate(ctx echo.Context) error {
	var request ThreadsCreateRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body ThreadsCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body ThreadsCreateFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.ThreadsCreate(ctx.Request().Context(), request.(ThreadsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsCreate")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case ThreadsCreate200JSONResponse:
		return ctx.JSON(200, v)
	case ThreadsCreate401Response:
		return ctx.NoContent(401)
	case ThreadsCreate404Response:
		return ctx.NoContent(404)
	case ThreadsCreatedefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// ThreadsGet operation middleware
func (sh *strictHandler) ThreadsGet(ctx echo.Context, threadId ThreadID) error {
	var request ThreadsGetRequestObject

	request.ThreadId = threadId

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.ThreadsGet(ctx.Request().Context(), request.(ThreadsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsGet")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case ThreadsGet200JSONResponse:
		return ctx.JSON(200, v)
	case ThreadsGet401Response:
		return ctx.NoContent(401)
	case ThreadsGet404Response:
		return ctx.NoContent(404)
	case ThreadsGetdefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// PostsCreate operation middleware
func (sh *strictHandler) PostsCreate(ctx echo.Context, threadId ThreadID) error {
	var request PostsCreateRequestObject

	request.ThreadId = threadId
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body PostsCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body PostsCreateFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.PostsCreate(ctx.Request().Context(), request.(PostsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostsCreate")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case PostsCreate200JSONResponse:
		return ctx.JSON(200, v)
	case PostsCreate401Response:
		return ctx.NoContent(401)
	case PostsCreate404Response:
		return ctx.NoContent(404)
	case PostsCreatedefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx echo.Context) error {
	var request GetVersionRequestObject

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.GetVersion(ctx.Request().Context(), request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case GetVersion200TextResponse:
		return ctx.Blob(200, "text/plain", []byte(v))
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xb3XPbNhL/V3DozWSmQ0tOmtyDni5xrqkvTeyJk+uD7UkgciUiIQEWH5F1Hv3vN/gg",
	"CYqQRCnKtZ7pUysT2F3sb7+wi9zjlJcVZ8CUxJN7XBFBSlAg7K/naco1U78QlhVg/pCBTAWtFOUMT+rP",
	"KLffRzjBcEfKyizFkmuVpwVZSJxgalZXROU4wYyU5jtxez+6vTjBAn7XVECGJ0poSLBMcyiJYaqWlaWo",
	"BGVzvFolNePzl5tlOn+5nS/NtvL8u4AZnuAfxq16xu6rHJ9nwBSdURBWmPe5AJLFZHFfNoqi7OejSbJy",
	"VECqFzyj4ADUKr8kUi64yMzvlDMFTJn/JVVV0JQYUcefpZH3fiBXQ/Sd42QVEFK6O1ksFiczLsoTLQpg",
	"Kc8gO5S0IX7JpZJnAoiCox3A0LzS05JKaYA68hl61FfJml244yCCKi4VWlCVU4YIcvYwwo1NHfvcjur3",
	"O3mEvjdLWXEmIYwp8hWoK52mIOXxDNORjqn84rVRqzGvozMNaMYZJzgHkvmQegXq5IzzLxS6LNaDnKH0",
	"gmS1M/RiywuSIVF7SoLPmQLBSHEF4iuIfwnBxfFOeHnuCEaOV/NFjjHyCxP8lqufuWZZX/K3XKGZ/dR1",
	"72MDY0jHRPZR2fpeajlnSDreM10Uy74DHlsyR3yLbF6sUJJXoP4v/AFRZgKApYvIlGvVhCZEWIaoklZ3",
	"MpTuVyr3E48qKOUwOd/BDASwFAw/7yZECLKMHcAIgvgMkaLwQjs5PzCiVc4FlRAxyebrf8Fa5W8wNW7N",
	"LvW0oOlrWFo7oJxd2B37WYIXmU8/Q6pwgu9O5vykPgdbHjdorOrSwcXa2nONkFlGDXlSXApegVC2RHDV",
	"xloJhYLfVpkMgSGDKEsLnVE2RwTluiQMGQ2TaQGoBCnJ3BaBVUD/HkMtwJqwCfZbot+kns9BKgdWvwBs",
	"y6Vrz+A2WVN0WybaurYj05TyKFfvd89V9GsGBWz+CiWhRfQLzfap4+ryMEJIV9lG8daUQrNtGnnrOfSd",
	"X0sTzkvwsPtquVvaX4WlfU/IsITrKZ62BzWmEbkt/FMqLpYZsBEX8xh9xb8A6+6u6go32amVhn1NKKql",
	"bpmwfoSDtX9GFMy5WPaJkqykLKA75bwAwqxN8oJrscEgA/i+p+GZeH9Wu5L/SpmCudsnuYh+WcV0wMuS",
	"s8vO6bu66Dhh30IVLQGpHJAAybVIAS2IbDNmgl32whNsnOXELI+ZUceZh3KRfKZO/M7hrPaFoePmQ0Xz",
	"m4ZK1TfYMPqFMsQM+bzjxuvZQzP6uwbUOhuacYFUTmUjcjegpOmzgmVP5GP59B/PnpBM6Wen4TnuaN+1",
	"u3m0Vbat+oxHFcXFDE+utyu+Z42rpJcreLYcUmq+4NnyDRFfMr6wfiugKpYfFd+zmxCiYln39X/bT9ix",
	"i6QJ4W2h1hMxaluGI1Jw52qoDffTELof0JulXXbDbth7AzGViKCP5k8f260ffa8DOUxNyU0Z+rH0wvw4",
	"umExz1m7Sg8q+BN8KfiMFtDWjREbLSmjJSmQqBchxdcSXizs7x9LB9xXbTaOBst3QNJIFoWSf6ZHiPgx",
	"lv5uMNiD+jX6urTWBgfX/DWIa4V+1zEUVbZnKAttIoHMTQJKcEUZAxMqXDVvLIrMTZHiREhwWidgQ46k",
	"Ssa8q1FCx4COFk+8bLvUsG7Dq0D6HXubMmPVqKTnAb/loHIQNo/4cEElcquNa9poXTMctb4ZFCYNrv0w",
	"wnQ5BdEEIKRZBj4DtEHE/PeCFcv6EtKvKzxGEfct/DXPrjA3MkfcxqucSJSTDM0EL1EFvHKt6UHW5xyu",
	"Z361iUUksR/QVxDSX5ZajT6SQTw1KVBLc7tGlYCvFBbSBb0NagiuQsbII5w/vPsVzQQFlhVLZBahRU7T",
	"3OIooAKWQWYjsBXJqub85Q2zgtgMzUBKe6U39RuZ0oKq5UCZrF9twcV8R0RKnlLbX2nEaOFv8OgTX9O9",
	"8/YNtZAqoKv1bn76BYqCowUXRfa3nVXQdw0r/aTt/a5NQe56DRKV3KtxeztmqtUNyzhIxLiqdzdoyzr9",
	"BrpBHyTMdGGtURgLMXpABRFzuGEGPOnY2sYJ4gJxGyUkVZo4P1vkwNCSa5Rx9kghBpBZBjNdFCgjihgL",
	"akJoN3kfp7AaGga7+bi22N257L1ZGZrdgC126SZzsgdtjKYR/3Zj9n0/xLsMhOQgfwpl3u5V5DCfkpBq",
	"QdXyyijJgy34Qrrrgp2Epa6b1czC6lv/iQRnLq3YFX0NVu4FTI0Hst1E6pWbqRkxjWdZhTlNNNtxgn08",
	"xxP82HDmFTBSUTzBP41OR4+N6xOV24ON/bdR3fibg4r2vGFi/WQODARRXPgrq6mWP5Wkunb6uzXpT8xI",
	"CverT4jOXF6jEklQSPEb9mm92fhpNBohydH5oxJ91lIhLY1PVwUxrl+nHsYXLrQbD7SbzzM8wa9AXVWQ",
	"4rUZzZPT07UWpyE0tjR3dCBjg5fAJPDk+jbBUpclMR5sBLBquaiAPb88Rz+NTpGsIKUzf0ZEJPr31cXb",
	"Ue1Bk2tcUpniW0N2/PXx2JfscnzfznZXARLdEwfjJwtjO+7eUNq1S8bt2NmE85jGYgSadePI6GuV4Ken",
	"j3dv7fSv7aanuzc1MxiLyozoQu3eFJskWQQ7mLVXJTRdovOXITw1IAFEWuXjuks3lnTOnB1V/rK+BlEw",
	"tL5ya8PR9nLzGYLp97gz+l4dBFc42Xs4OG3wNKNJW9nbey7cUalsI9+jaCs00vZ/TV1YI9YBV6t8G7C6",
	"Gg6srv4kwA7YE8xivydK72BOpQKT2hksjoFOnQvHREpwd5hoYKxnXm/IF3hul7rE+Zfj7Q/pfVCrXN+u",
	"OgifcVNGKVenpwJslUoKRGqduytZx1uDrtRwpNt86N5YrTY7Zo39K1Ah9AdlR/9YzGXIv0zn22K2IsLV",
	"RzVCgZnYC0A/kg81kpJ8gUHB4Kyx0X40OHAIHnkW9AAD9yAvb4ATNrI7HZuayZb/bpRuIn0bCUZ4M2AH",
	"+LQ/fAfFb3fsfZHb+aLiT5aHI57XAbAS3FihAdK7hIMygNGNNKKe6BssG90vfFVziLbD/Q/2htG0Ozpv",
	"eVqV1kq89b3ojWr0rygPyEddAqtvgKL7kOwhYtI8WjXRyjcggwajv7RD1p0a9LDqesD4vnkEvdrYPDHW",
	"sKULKnWaIyLtwzTbykmQ01rimpVUoQWRN6x+60ckWkBhCq7AxrY1TSN9k+BR3r7RtHkuflggDTg/VM/e",
	"8cBwGxR7mtS4mVHFA0T4uPwbcdwzsoScD4orkYezDz6qbHpuUEPu0PSA1x3aDUHjfQ7NVM6PI5vxijGo",
	"zLI15kbLZoIkoAAiAU01LUyguGFtpHCDPgGVAAlMERXM+15RhVJeltROH/MNndb/eJH/8Gar5DO1IKJV",
	"kKMYa7GuV7xNH98VvH55v93NTqZaUjthLPicpkgqPZuN2l69ZbBKekMOrXJTP/nmb/1eSAY7bSnV3/lB",
	"gqjvQJ3ldTeyv+VnLnQZlhadf5gT23EZxiXSdKoDW/UknKmublf/CwAA//9UKwkWYTUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
