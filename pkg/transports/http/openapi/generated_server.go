// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220728213615-b9782fb00949 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BrowserScopes = "browser.Scopes"
)

// APIError A description of an error including a human readable message.
type APIError struct {
	Error     string  `json:"error"`
	Message   *string `json:"message,omitempty"`
	Suggested *string `json:"suggested,omitempty"`
}

// Account defines model for Account.
type Account struct {
	Bio       *string `json:"bio,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	Email     *string `json:"email,omitempty"`

	// Id A unique identifier for this resource.
	Id        Identifier `json:"id"`
	Name      *string    `json:"name,omitempty"`
	UpdatedAt *string    `json:"updatedAt,omitempty"`
}

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Identifier string `json:"identifier"`
	Token      string `json:"token"`
}

// AuthSuccess defines model for AuthSuccess.
type AuthSuccess struct {
	Id string `json:"id"`
}

// Category defines model for Category.
type Category struct {
	Admin       *bool   `json:"admin,omitempty"`
	Colour      *string `json:"colour,omitempty"`
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id        *Identifier `json:"id,omitempty"`
	Name      *string     `json:"name,omitempty"`
	PostCount *int        `json:"postCount,omitempty"`
	Sort      *int        `json:"sort,omitempty"`
}

// CommonProperties defines model for CommonProperties.
type CommonProperties struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// Identifier A unique identifier for this resource.
type Identifier string

// ProfileReference A minimal reference to an account.
type ProfileReference struct {
	// Id A unique identifier for this resource.
	Id   *Identifier `json:"id,omitempty"`
	Name *string     `json:"name,omitempty"`
}

// React defines model for React.
type React struct {
	Emoji *string `json:"emoji,omitempty"`

	// Id A unique identifier for this resource.
	Id *Identifier `json:"id,omitempty"`
}

// Thread defines model for Thread.
type Thread struct {
	// Author A minimal reference to an account.
	Author   ProfileReference `json:"author"`
	Category Category         `json:"category"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool `json:"pinned"`

	// Posts The number of posts under this thread.
	Posts *int `json:"posts,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts []React `json:"reacts"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A URL friendly slug which is prepended with the post ID
	// for uniqueness and sortability.
	Slug *string `json:"slug,omitempty"`

	// Tags A list of tags associated with the thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ThreadSubmission defines model for ThreadSubmission.
type ThreadSubmission struct {
	// Body The markdown body for the new thread.
	Body string `json:"body"`

	// Category A unique identifier for this resource.
	Category Identifier `json:"category"`

	// Tags A list of tags for the new thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`
}

// AccountsGetSuccess defines model for AccountsGetSuccess.
type AccountsGetSuccess = Account

// InternalServerError A description of an error including a human readable message.
type InternalServerError = APIError

// ThreadsCreateSuccess defines model for ThreadsCreateSuccess.
type ThreadsCreateSuccess = Thread

// ThreadsList defines model for ThreadsList.
type ThreadsList = []Thread

// AuthPasswordSigninJSONRequestBody defines body for AuthPasswordSignin for application/json ContentType.
type AuthPasswordSigninJSONRequestBody = AuthRequest

// AuthPasswordSigninFormdataRequestBody defines body for AuthPasswordSignin for application/x-www-form-urlencoded ContentType.
type AuthPasswordSigninFormdataRequestBody = AuthRequest

// AuthPasswordSignupJSONRequestBody defines body for AuthPasswordSignup for application/json ContentType.
type AuthPasswordSignupJSONRequestBody = AuthRequest

// AuthPasswordSignupFormdataRequestBody defines body for AuthPasswordSignup for application/x-www-form-urlencoded ContentType.
type AuthPasswordSignupFormdataRequestBody = AuthRequest

// ThreadsCreateJSONRequestBody defines body for ThreadsCreate for application/json ContentType.
type ThreadsCreateJSONRequestBody = ThreadSubmission

// ThreadsCreateFormdataRequestBody defines body for ThreadsCreate for application/x-www-form-urlencoded ContentType.
type ThreadsCreateFormdataRequestBody = ThreadSubmission

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /openapi.json)
	GetSpec(ctx echo.Context) error

	// (GET /v1/accounts/{id})
	AccountsGet(ctx echo.Context, id Identifier) error

	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx echo.Context) error

	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx echo.Context) error

	// (GET /v1/threads)
	ThreadsList(ctx echo.Context) error

	// (POST /v1/threads)
	ThreadsCreate(ctx echo.Context) error

	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpec(ctx)
	return err
}

// AccountsGet converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsGet(ctx, id)
	return err
}

// AuthPasswordSignin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignin(ctx)
	return err
}

// AuthPasswordSignup converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignup(ctx)
	return err
}

// ThreadsList converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsList(ctx)
	return err
}

// ThreadsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsCreate(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/openapi.json", wrapper.GetSpec)
	router.GET(baseURL+"/v1/accounts/:id", wrapper.AccountsGet)
	router.POST(baseURL+"/v1/auth/password/signin", wrapper.AuthPasswordSignin)
	router.POST(baseURL+"/v1/auth/password/signup", wrapper.AuthPasswordSignup)
	router.GET(baseURL+"/v1/threads", wrapper.ThreadsList)
	router.POST(baseURL+"/v1/threads", wrapper.ThreadsCreate)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

type AccountsGetSuccessJSONResponse Account

func (t AccountsGetSuccessJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((Account)(t))
}

type AuthSuccessResponseHeaders struct {
	SetCookie string
}
type AuthSuccessJSONResponse struct {
	Body AuthSuccess

	Headers AuthSuccessResponseHeaders
}

func (t AuthSuccessJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type BadRequestResponse struct {
}

type InternalServerErrorJSONResponse APIError

func (t InternalServerErrorJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((APIError)(t))
}

type NotFoundResponse struct {
}

type ThreadsCreateSuccessJSONResponse Thread

func (t ThreadsCreateSuccessJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((Thread)(t))
}

type ThreadsListJSONResponse []Thread

func (t ThreadsListJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(([]Thread)(t))
}

type UnauthorisedResponse struct {
}

type GetSpecRequestObject struct {
}

type GetSpec200TextResponse string

type AccountsGetRequestObject struct {
	Id Identifier `json:"id"`
}

type AccountsGet200JSONResponse = AccountsGetSuccessJSONResponse

type AccountsGet401Response = UnauthorisedResponse

type AccountsGet404Response = NotFoundResponse

type AccountsGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t AccountsGetdefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type AuthPasswordSigninRequestObject struct {
	JSONBody     *AuthPasswordSigninJSONRequestBody
	FormdataBody *AuthPasswordSigninFormdataRequestBody
}

type AuthPasswordSignin200JSONResponse = AuthSuccessJSONResponse

type AuthPasswordSignin401Response = UnauthorisedResponse

type AuthPasswordSignin404Response = NotFoundResponse

type AuthPasswordSignindefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t AuthPasswordSignindefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type AuthPasswordSignupRequestObject struct {
	JSONBody     *AuthPasswordSignupJSONRequestBody
	FormdataBody *AuthPasswordSignupFormdataRequestBody
}

type AuthPasswordSignup200JSONResponse = AuthSuccessJSONResponse

type AuthPasswordSignup400Response = BadRequestResponse

type AuthPasswordSignupdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t AuthPasswordSignupdefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type ThreadsListRequestObject struct {
}

type ThreadsList200JSONResponse = ThreadsListJSONResponse

type ThreadsList401Response = UnauthorisedResponse

type ThreadsList404Response = NotFoundResponse

type ThreadsListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t ThreadsListdefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type ThreadsCreateRequestObject struct {
	JSONBody     *ThreadsCreateJSONRequestBody
	FormdataBody *ThreadsCreateFormdataRequestBody
}

type ThreadsCreate200JSONResponse = ThreadsCreateSuccessJSONResponse

type ThreadsCreate401Response = UnauthorisedResponse

type ThreadsCreate404Response = NotFoundResponse

type ThreadsCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (t ThreadsCreatedefaultJSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

type GetVersionRequestObject struct {
}

type GetVersion200TextResponse string

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /openapi.json)
	GetSpec(ctx context.Context, request GetSpecRequestObject) interface{}

	// (GET /v1/accounts/{id})
	AccountsGet(ctx context.Context, request AccountsGetRequestObject) interface{}

	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx context.Context, request AuthPasswordSigninRequestObject) interface{}

	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx context.Context, request AuthPasswordSignupRequestObject) interface{}

	// (GET /v1/threads)
	ThreadsList(ctx context.Context, request ThreadsListRequestObject) interface{}

	// (POST /v1/threads)
	ThreadsCreate(ctx context.Context, request ThreadsCreateRequestObject) interface{}

	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) interface{}
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) interface{}

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetSpec operation middleware
func (sh *strictHandler) GetSpec(ctx echo.Context) error {
	var request GetSpecRequestObject

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.GetSpec(ctx.Request().Context(), request.(GetSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpec")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case GetSpec200TextResponse:
		return ctx.Blob(200, "text/plain", []byte(v))
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// AccountsGet operation middleware
func (sh *strictHandler) AccountsGet(ctx echo.Context, id Identifier) error {
	var request AccountsGetRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.AccountsGet(ctx.Request().Context(), request.(AccountsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsGet")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case AccountsGet200JSONResponse:
		return ctx.JSON(200, v)
	case AccountsGet401Response:
		return ctx.NoContent(401)
	case AccountsGet404Response:
		return ctx.NoContent(404)
	case AccountsGetdefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// AuthPasswordSignin operation middleware
func (sh *strictHandler) AuthPasswordSignin(ctx echo.Context) error {
	var request AuthPasswordSigninRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AuthPasswordSigninJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AuthPasswordSigninFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.AuthPasswordSignin(ctx.Request().Context(), request.(AuthPasswordSigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignin")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case AuthPasswordSignin200JSONResponse:
		ctx.Response().Header().Set("Set-Cookie", fmt.Sprint(v.Headers.SetCookie))
		return ctx.JSON(200, v)
	case AuthPasswordSignin401Response:
		return ctx.NoContent(401)
	case AuthPasswordSignin404Response:
		return ctx.NoContent(404)
	case AuthPasswordSignindefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// AuthPasswordSignup operation middleware
func (sh *strictHandler) AuthPasswordSignup(ctx echo.Context) error {
	var request AuthPasswordSignupRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AuthPasswordSignupJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AuthPasswordSignupFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.AuthPasswordSignup(ctx.Request().Context(), request.(AuthPasswordSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignup")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case AuthPasswordSignup200JSONResponse:
		ctx.Response().Header().Set("Set-Cookie", fmt.Sprint(v.Headers.SetCookie))
		return ctx.JSON(200, v)
	case AuthPasswordSignup400Response:
		return ctx.NoContent(400)
	case AuthPasswordSignupdefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// ThreadsList operation middleware
func (sh *strictHandler) ThreadsList(ctx echo.Context) error {
	var request ThreadsListRequestObject

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.ThreadsList(ctx.Request().Context(), request.(ThreadsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsList")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case ThreadsList200JSONResponse:
		return ctx.JSON(200, v)
	case ThreadsList401Response:
		return ctx.NoContent(401)
	case ThreadsList404Response:
		return ctx.NoContent(404)
	case ThreadsListdefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// ThreadsCreate operation middleware
func (sh *strictHandler) ThreadsCreate(ctx echo.Context) error {
	var request ThreadsCreateRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body ThreadsCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body ThreadsCreateFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.ThreadsCreate(ctx.Request().Context(), request.(ThreadsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsCreate")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case ThreadsCreate200JSONResponse:
		return ctx.JSON(200, v)
	case ThreadsCreate401Response:
		return ctx.NoContent(401)
	case ThreadsCreate404Response:
		return ctx.NoContent(404)
	case ThreadsCreatedefaultJSONResponse:
		return ctx.JSON(v.StatusCode, v)
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx echo.Context) error {
	var request GetVersionRequestObject

	handler := func(ctx echo.Context, request interface{}) interface{} {
		return sh.ssi.GetVersion(ctx.Request().Context(), request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response := handler(ctx, request)

	switch v := response.(type) {
	case GetVersion200TextResponse:
		return ctx.Blob(200, "text/plain", []byte(v))
	case error:
		return v
	case nil:
	default:
		return fmt.Errorf("Unexpected response type: %T", v)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//9oSO/1eBwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
