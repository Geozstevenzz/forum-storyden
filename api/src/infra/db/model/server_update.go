// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/api/src/infra/db/model/predicate"
	"github.com/Southclaws/storyden/api/src/infra/db/model/rule"
	"github.com/Southclaws/storyden/api/src/infra/db/model/server"
	"github.com/Southclaws/storyden/api/src/infra/db/model/user"
	"github.com/google/uuid"
)

// ServerUpdate is the builder for updating Server entities.
type ServerUpdate struct {
	config
	hooks    []Hook
	mutation *ServerMutation
}

// Where appends a list predicates to the ServerUpdate builder.
func (su *ServerUpdate) Where(ps ...predicate.Server) *ServerUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetIP sets the "ip" field.
func (su *ServerUpdate) SetIP(s string) *ServerUpdate {
	su.mutation.SetIP(s)
	return su
}

// SetHn sets the "hn" field.
func (su *ServerUpdate) SetHn(s string) *ServerUpdate {
	su.mutation.SetHn(s)
	return su
}

// SetPc sets the "pc" field.
func (su *ServerUpdate) SetPc(i int) *ServerUpdate {
	su.mutation.ResetPc()
	su.mutation.SetPc(i)
	return su
}

// AddPc adds i to the "pc" field.
func (su *ServerUpdate) AddPc(i int) *ServerUpdate {
	su.mutation.AddPc(i)
	return su
}

// SetPm sets the "pm" field.
func (su *ServerUpdate) SetPm(i int) *ServerUpdate {
	su.mutation.ResetPm()
	su.mutation.SetPm(i)
	return su
}

// AddPm adds i to the "pm" field.
func (su *ServerUpdate) AddPm(i int) *ServerUpdate {
	su.mutation.AddPm(i)
	return su
}

// SetGm sets the "gm" field.
func (su *ServerUpdate) SetGm(s string) *ServerUpdate {
	su.mutation.SetGm(s)
	return su
}

// SetLa sets the "la" field.
func (su *ServerUpdate) SetLa(s string) *ServerUpdate {
	su.mutation.SetLa(s)
	return su
}

// SetPa sets the "pa" field.
func (su *ServerUpdate) SetPa(b bool) *ServerUpdate {
	su.mutation.SetPa(b)
	return su
}

// SetVn sets the "vn" field.
func (su *ServerUpdate) SetVn(s string) *ServerUpdate {
	su.mutation.SetVn(s)
	return su
}

// SetDomain sets the "domain" field.
func (su *ServerUpdate) SetDomain(s string) *ServerUpdate {
	su.mutation.SetDomain(s)
	return su
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (su *ServerUpdate) SetNillableDomain(s *string) *ServerUpdate {
	if s != nil {
		su.SetDomain(*s)
	}
	return su
}

// ClearDomain clears the value of the "domain" field.
func (su *ServerUpdate) ClearDomain() *ServerUpdate {
	su.mutation.ClearDomain()
	return su
}

// SetDescription sets the "description" field.
func (su *ServerUpdate) SetDescription(s string) *ServerUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *ServerUpdate) SetNillableDescription(s *string) *ServerUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *ServerUpdate) ClearDescription() *ServerUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetBanner sets the "banner" field.
func (su *ServerUpdate) SetBanner(s string) *ServerUpdate {
	su.mutation.SetBanner(s)
	return su
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (su *ServerUpdate) SetNillableBanner(s *string) *ServerUpdate {
	if s != nil {
		su.SetBanner(*s)
	}
	return su
}

// ClearBanner clears the value of the "banner" field.
func (su *ServerUpdate) ClearBanner() *ServerUpdate {
	su.mutation.ClearBanner()
	return su
}

// SetUserId sets the "userId" field.
func (su *ServerUpdate) SetUserId(s string) *ServerUpdate {
	su.mutation.SetUserId(s)
	return su
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (su *ServerUpdate) SetNillableUserId(s *string) *ServerUpdate {
	if s != nil {
		su.SetUserId(*s)
	}
	return su
}

// ClearUserId clears the value of the "userId" field.
func (su *ServerUpdate) ClearUserId() *ServerUpdate {
	su.mutation.ClearUserId()
	return su
}

// SetActive sets the "active" field.
func (su *ServerUpdate) SetActive(b bool) *ServerUpdate {
	su.mutation.SetActive(b)
	return su
}

// SetUpdatedAt sets the "updatedAt" field.
func (su *ServerUpdate) SetUpdatedAt(t time.Time) *ServerUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deletedAt" field.
func (su *ServerUpdate) SetDeletedAt(t time.Time) *ServerUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (su *ServerUpdate) SetNillableDeletedAt(t *time.Time) *ServerUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (su *ServerUpdate) ClearDeletedAt() *ServerUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// AddRuIDs adds the "ru" edge to the Rule entity by IDs.
func (su *ServerUpdate) AddRuIDs(ids ...int) *ServerUpdate {
	su.mutation.AddRuIDs(ids...)
	return su
}

// AddRu adds the "ru" edges to the Rule entity.
func (su *ServerUpdate) AddRu(r ...*Rule) *ServerUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddRuIDs(ids...)
}

// AddUserIDs adds the "User" edge to the User entity by IDs.
func (su *ServerUpdate) AddUserIDs(ids ...uuid.UUID) *ServerUpdate {
	su.mutation.AddUserIDs(ids...)
	return su
}

// AddUser adds the "User" edges to the User entity.
func (su *ServerUpdate) AddUser(u ...*User) *ServerUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.AddUserIDs(ids...)
}

// Mutation returns the ServerMutation object of the builder.
func (su *ServerUpdate) Mutation() *ServerMutation {
	return su.mutation
}

// ClearRu clears all "ru" edges to the Rule entity.
func (su *ServerUpdate) ClearRu() *ServerUpdate {
	su.mutation.ClearRu()
	return su
}

// RemoveRuIDs removes the "ru" edge to Rule entities by IDs.
func (su *ServerUpdate) RemoveRuIDs(ids ...int) *ServerUpdate {
	su.mutation.RemoveRuIDs(ids...)
	return su
}

// RemoveRu removes "ru" edges to Rule entities.
func (su *ServerUpdate) RemoveRu(r ...*Rule) *ServerUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveRuIDs(ids...)
}

// ClearUser clears all "User" edges to the User entity.
func (su *ServerUpdate) ClearUser() *ServerUpdate {
	su.mutation.ClearUser()
	return su
}

// RemoveUserIDs removes the "User" edge to User entities by IDs.
func (su *ServerUpdate) RemoveUserIDs(ids ...uuid.UUID) *ServerUpdate {
	su.mutation.RemoveUserIDs(ids...)
	return su
}

// RemoveUser removes "User" edges to User entities.
func (su *ServerUpdate) RemoveUser(u ...*User) *ServerUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServerUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServerUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServerUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ServerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   server.Table,
			Columns: server.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: server.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldIP,
		})
	}
	if value, ok := su.mutation.Hn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldHn,
		})
	}
	if value, ok := su.mutation.Pc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: server.FieldPc,
		})
	}
	if value, ok := su.mutation.AddedPc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: server.FieldPc,
		})
	}
	if value, ok := su.mutation.Pm(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: server.FieldPm,
		})
	}
	if value, ok := su.mutation.AddedPm(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: server.FieldPm,
		})
	}
	if value, ok := su.mutation.Gm(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldGm,
		})
	}
	if value, ok := su.mutation.La(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldLa,
		})
	}
	if value, ok := su.mutation.Pa(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: server.FieldPa,
		})
	}
	if value, ok := su.mutation.Vn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldVn,
		})
	}
	if value, ok := su.mutation.Domain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldDomain,
		})
	}
	if su.mutation.DomainCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldDomain,
		})
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldDescription,
		})
	}
	if su.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldDescription,
		})
	}
	if value, ok := su.mutation.Banner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldBanner,
		})
	}
	if su.mutation.BannerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldBanner,
		})
	}
	if value, ok := su.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldUserId,
		})
	}
	if su.mutation.UserIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldUserId,
		})
	}
	if value, ok := su.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: server.FieldActive,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: server.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: server.FieldDeletedAt,
		})
	}
	if su.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: server.FieldDeletedAt,
		})
	}
	if su.mutation.RuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.RuTable,
			Columns: []string{server.RuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedRuIDs(); len(nodes) > 0 && !su.mutation.RuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.RuTable,
			Columns: []string{server.RuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.RuTable,
			Columns: []string{server.RuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.UserTable,
			Columns: []string{server.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedUserIDs(); len(nodes) > 0 && !su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.UserTable,
			Columns: []string{server.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.UserTable,
			Columns: []string{server.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{server.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ServerUpdateOne is the builder for updating a single Server entity.
type ServerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerMutation
}

// SetIP sets the "ip" field.
func (suo *ServerUpdateOne) SetIP(s string) *ServerUpdateOne {
	suo.mutation.SetIP(s)
	return suo
}

// SetHn sets the "hn" field.
func (suo *ServerUpdateOne) SetHn(s string) *ServerUpdateOne {
	suo.mutation.SetHn(s)
	return suo
}

// SetPc sets the "pc" field.
func (suo *ServerUpdateOne) SetPc(i int) *ServerUpdateOne {
	suo.mutation.ResetPc()
	suo.mutation.SetPc(i)
	return suo
}

// AddPc adds i to the "pc" field.
func (suo *ServerUpdateOne) AddPc(i int) *ServerUpdateOne {
	suo.mutation.AddPc(i)
	return suo
}

// SetPm sets the "pm" field.
func (suo *ServerUpdateOne) SetPm(i int) *ServerUpdateOne {
	suo.mutation.ResetPm()
	suo.mutation.SetPm(i)
	return suo
}

// AddPm adds i to the "pm" field.
func (suo *ServerUpdateOne) AddPm(i int) *ServerUpdateOne {
	suo.mutation.AddPm(i)
	return suo
}

// SetGm sets the "gm" field.
func (suo *ServerUpdateOne) SetGm(s string) *ServerUpdateOne {
	suo.mutation.SetGm(s)
	return suo
}

// SetLa sets the "la" field.
func (suo *ServerUpdateOne) SetLa(s string) *ServerUpdateOne {
	suo.mutation.SetLa(s)
	return suo
}

// SetPa sets the "pa" field.
func (suo *ServerUpdateOne) SetPa(b bool) *ServerUpdateOne {
	suo.mutation.SetPa(b)
	return suo
}

// SetVn sets the "vn" field.
func (suo *ServerUpdateOne) SetVn(s string) *ServerUpdateOne {
	suo.mutation.SetVn(s)
	return suo
}

// SetDomain sets the "domain" field.
func (suo *ServerUpdateOne) SetDomain(s string) *ServerUpdateOne {
	suo.mutation.SetDomain(s)
	return suo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableDomain(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetDomain(*s)
	}
	return suo
}

// ClearDomain clears the value of the "domain" field.
func (suo *ServerUpdateOne) ClearDomain() *ServerUpdateOne {
	suo.mutation.ClearDomain()
	return suo
}

// SetDescription sets the "description" field.
func (suo *ServerUpdateOne) SetDescription(s string) *ServerUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableDescription(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *ServerUpdateOne) ClearDescription() *ServerUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetBanner sets the "banner" field.
func (suo *ServerUpdateOne) SetBanner(s string) *ServerUpdateOne {
	suo.mutation.SetBanner(s)
	return suo
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableBanner(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetBanner(*s)
	}
	return suo
}

// ClearBanner clears the value of the "banner" field.
func (suo *ServerUpdateOne) ClearBanner() *ServerUpdateOne {
	suo.mutation.ClearBanner()
	return suo
}

// SetUserId sets the "userId" field.
func (suo *ServerUpdateOne) SetUserId(s string) *ServerUpdateOne {
	suo.mutation.SetUserId(s)
	return suo
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableUserId(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetUserId(*s)
	}
	return suo
}

// ClearUserId clears the value of the "userId" field.
func (suo *ServerUpdateOne) ClearUserId() *ServerUpdateOne {
	suo.mutation.ClearUserId()
	return suo
}

// SetActive sets the "active" field.
func (suo *ServerUpdateOne) SetActive(b bool) *ServerUpdateOne {
	suo.mutation.SetActive(b)
	return suo
}

// SetUpdatedAt sets the "updatedAt" field.
func (suo *ServerUpdateOne) SetUpdatedAt(t time.Time) *ServerUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deletedAt" field.
func (suo *ServerUpdateOne) SetDeletedAt(t time.Time) *ServerUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableDeletedAt(t *time.Time) *ServerUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (suo *ServerUpdateOne) ClearDeletedAt() *ServerUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// AddRuIDs adds the "ru" edge to the Rule entity by IDs.
func (suo *ServerUpdateOne) AddRuIDs(ids ...int) *ServerUpdateOne {
	suo.mutation.AddRuIDs(ids...)
	return suo
}

// AddRu adds the "ru" edges to the Rule entity.
func (suo *ServerUpdateOne) AddRu(r ...*Rule) *ServerUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddRuIDs(ids...)
}

// AddUserIDs adds the "User" edge to the User entity by IDs.
func (suo *ServerUpdateOne) AddUserIDs(ids ...uuid.UUID) *ServerUpdateOne {
	suo.mutation.AddUserIDs(ids...)
	return suo
}

// AddUser adds the "User" edges to the User entity.
func (suo *ServerUpdateOne) AddUser(u ...*User) *ServerUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.AddUserIDs(ids...)
}

// Mutation returns the ServerMutation object of the builder.
func (suo *ServerUpdateOne) Mutation() *ServerMutation {
	return suo.mutation
}

// ClearRu clears all "ru" edges to the Rule entity.
func (suo *ServerUpdateOne) ClearRu() *ServerUpdateOne {
	suo.mutation.ClearRu()
	return suo
}

// RemoveRuIDs removes the "ru" edge to Rule entities by IDs.
func (suo *ServerUpdateOne) RemoveRuIDs(ids ...int) *ServerUpdateOne {
	suo.mutation.RemoveRuIDs(ids...)
	return suo
}

// RemoveRu removes "ru" edges to Rule entities.
func (suo *ServerUpdateOne) RemoveRu(r ...*Rule) *ServerUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveRuIDs(ids...)
}

// ClearUser clears all "User" edges to the User entity.
func (suo *ServerUpdateOne) ClearUser() *ServerUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// RemoveUserIDs removes the "User" edge to User entities by IDs.
func (suo *ServerUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *ServerUpdateOne {
	suo.mutation.RemoveUserIDs(ids...)
	return suo
}

// RemoveUser removes "User" edges to User entities.
func (suo *ServerUpdateOne) RemoveUser(u ...*User) *ServerUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServerUpdateOne) Select(field string, fields ...string) *ServerUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Server entity.
func (suo *ServerUpdateOne) Save(ctx context.Context) (*Server, error) {
	var (
		err  error
		node *Server
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServerUpdateOne) SaveX(ctx context.Context) *Server {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServerUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServerUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ServerUpdateOne) sqlSave(ctx context.Context) (_node *Server, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   server.Table,
			Columns: server.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: server.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "Server.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, server.FieldID)
		for _, f := range fields {
			if !server.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != server.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldIP,
		})
	}
	if value, ok := suo.mutation.Hn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldHn,
		})
	}
	if value, ok := suo.mutation.Pc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: server.FieldPc,
		})
	}
	if value, ok := suo.mutation.AddedPc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: server.FieldPc,
		})
	}
	if value, ok := suo.mutation.Pm(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: server.FieldPm,
		})
	}
	if value, ok := suo.mutation.AddedPm(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: server.FieldPm,
		})
	}
	if value, ok := suo.mutation.Gm(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldGm,
		})
	}
	if value, ok := suo.mutation.La(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldLa,
		})
	}
	if value, ok := suo.mutation.Pa(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: server.FieldPa,
		})
	}
	if value, ok := suo.mutation.Vn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldVn,
		})
	}
	if value, ok := suo.mutation.Domain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldDomain,
		})
	}
	if suo.mutation.DomainCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldDomain,
		})
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldDescription,
		})
	}
	if suo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldDescription,
		})
	}
	if value, ok := suo.mutation.Banner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldBanner,
		})
	}
	if suo.mutation.BannerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldBanner,
		})
	}
	if value, ok := suo.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldUserId,
		})
	}
	if suo.mutation.UserIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldUserId,
		})
	}
	if value, ok := suo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: server.FieldActive,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: server.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: server.FieldDeletedAt,
		})
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: server.FieldDeletedAt,
		})
	}
	if suo.mutation.RuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.RuTable,
			Columns: []string{server.RuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedRuIDs(); len(nodes) > 0 && !suo.mutation.RuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.RuTable,
			Columns: []string{server.RuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.RuTable,
			Columns: []string{server.RuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.UserTable,
			Columns: []string{server.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedUserIDs(); len(nodes) > 0 && !suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.UserTable,
			Columns: []string{server.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.UserTable,
			Columns: []string{server.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Server{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{server.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
