// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/api/src/infra/db/model/category"
	"github.com/Southclaws/storyden/api/src/infra/db/model/post"
	"github.com/Southclaws/storyden/api/src/infra/db/model/react"
	"github.com/Southclaws/storyden/api/src/infra/db/model/tag"
	"github.com/Southclaws/storyden/api/src/infra/db/model/user"
	"github.com/google/uuid"
)

// PostCreate is the builder for creating a Post entity.
type PostCreate struct {
	config
	mutation *PostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (pc *PostCreate) SetTitle(s string) *PostCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pc *PostCreate) SetNillableTitle(s *string) *PostCreate {
	if s != nil {
		pc.SetTitle(*s)
	}
	return pc
}

// SetSlug sets the "slug" field.
func (pc *PostCreate) SetSlug(s string) *PostCreate {
	pc.mutation.SetSlug(s)
	return pc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (pc *PostCreate) SetNillableSlug(s *string) *PostCreate {
	if s != nil {
		pc.SetSlug(*s)
	}
	return pc
}

// SetBody sets the "body" field.
func (pc *PostCreate) SetBody(s string) *PostCreate {
	pc.mutation.SetBody(s)
	return pc
}

// SetShort sets the "short" field.
func (pc *PostCreate) SetShort(s string) *PostCreate {
	pc.mutation.SetShort(s)
	return pc
}

// SetFirst sets the "first" field.
func (pc *PostCreate) SetFirst(b bool) *PostCreate {
	pc.mutation.SetFirst(b)
	return pc
}

// SetPinned sets the "pinned" field.
func (pc *PostCreate) SetPinned(b bool) *PostCreate {
	pc.mutation.SetPinned(b)
	return pc
}

// SetNillablePinned sets the "pinned" field if the given value is not nil.
func (pc *PostCreate) SetNillablePinned(b *bool) *PostCreate {
	if b != nil {
		pc.SetPinned(*b)
	}
	return pc
}

// SetCreatedAt sets the "createdAt" field.
func (pc *PostCreate) SetCreatedAt(t time.Time) *PostCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetUpdatedAt sets the "updatedAt" field.
func (pc *PostCreate) SetUpdatedAt(t time.Time) *PostCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetDeletedAt sets the "deletedAt" field.
func (pc *PostCreate) SetDeletedAt(t time.Time) *PostCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (pc *PostCreate) SetNillableDeletedAt(t *time.Time) *PostCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetUserId sets the "userId" field.
func (pc *PostCreate) SetUserId(s string) *PostCreate {
	pc.mutation.SetUserId(s)
	return pc
}

// SetRootPostId sets the "rootPostId" field.
func (pc *PostCreate) SetRootPostId(s string) *PostCreate {
	pc.mutation.SetRootPostId(s)
	return pc
}

// SetNillableRootPostId sets the "rootPostId" field if the given value is not nil.
func (pc *PostCreate) SetNillableRootPostId(s *string) *PostCreate {
	if s != nil {
		pc.SetRootPostId(*s)
	}
	return pc
}

// SetReplyPostId sets the "replyPostId" field.
func (pc *PostCreate) SetReplyPostId(s string) *PostCreate {
	pc.mutation.SetReplyPostId(s)
	return pc
}

// SetNillableReplyPostId sets the "replyPostId" field if the given value is not nil.
func (pc *PostCreate) SetNillableReplyPostId(s *string) *PostCreate {
	if s != nil {
		pc.SetReplyPostId(*s)
	}
	return pc
}

// SetCategoryId sets the "categoryId" field.
func (pc *PostCreate) SetCategoryId(s string) *PostCreate {
	pc.mutation.SetCategoryId(s)
	return pc
}

// SetNillableCategoryId sets the "categoryId" field if the given value is not nil.
func (pc *PostCreate) SetNillableCategoryId(s *string) *PostCreate {
	if s != nil {
		pc.SetCategoryId(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PostCreate) SetID(s string) *PostCreate {
	pc.mutation.SetID(s)
	return pc
}

// AddCategoryIDs adds the "category" edge to the Category entity by IDs.
func (pc *PostCreate) AddCategoryIDs(ids ...string) *PostCreate {
	pc.mutation.AddCategoryIDs(ids...)
	return pc
}

// AddCategory adds the "category" edges to the Category entity.
func (pc *PostCreate) AddCategory(c ...*Category) *PostCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddCategoryIDs(ids...)
}

// AddAuthorIDs adds the "author" edge to the User entity by IDs.
func (pc *PostCreate) AddAuthorIDs(ids ...uuid.UUID) *PostCreate {
	pc.mutation.AddAuthorIDs(ids...)
	return pc
}

// AddAuthor adds the "author" edges to the User entity.
func (pc *PostCreate) AddAuthor(u ...*User) *PostCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pc.AddAuthorIDs(ids...)
}

// SetRootID sets the "root" edge to the Post entity by ID.
func (pc *PostCreate) SetRootID(id string) *PostCreate {
	pc.mutation.SetRootID(id)
	return pc
}

// SetNillableRootID sets the "root" edge to the Post entity by ID if the given value is not nil.
func (pc *PostCreate) SetNillableRootID(id *string) *PostCreate {
	if id != nil {
		pc = pc.SetRootID(*id)
	}
	return pc
}

// SetRoot sets the "root" edge to the Post entity.
func (pc *PostCreate) SetRoot(p *Post) *PostCreate {
	return pc.SetRootID(p.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (pc *PostCreate) AddPostIDs(ids ...string) *PostCreate {
	pc.mutation.AddPostIDs(ids...)
	return pc
}

// AddPosts adds the "posts" edges to the Post entity.
func (pc *PostCreate) AddPosts(p ...*Post) *PostCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPostIDs(ids...)
}

// AddReplyToIDs adds the "replyTo" edge to the Post entity by IDs.
func (pc *PostCreate) AddReplyToIDs(ids ...string) *PostCreate {
	pc.mutation.AddReplyToIDs(ids...)
	return pc
}

// AddReplyTo adds the "replyTo" edges to the Post entity.
func (pc *PostCreate) AddReplyTo(p ...*Post) *PostCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddReplyToIDs(ids...)
}

// AddReplyIDs adds the "replies" edge to the Post entity by IDs.
func (pc *PostCreate) AddReplyIDs(ids ...string) *PostCreate {
	pc.mutation.AddReplyIDs(ids...)
	return pc
}

// AddReplies adds the "replies" edges to the Post entity.
func (pc *PostCreate) AddReplies(p ...*Post) *PostCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddReplyIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (pc *PostCreate) AddTagIDs(ids ...string) *PostCreate {
	pc.mutation.AddTagIDs(ids...)
	return pc
}

// AddTags adds the "tags" edges to the Tag entity.
func (pc *PostCreate) AddTags(t ...*Tag) *PostCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTagIDs(ids...)
}

// AddReactIDs adds the "reacts" edge to the React entity by IDs.
func (pc *PostCreate) AddReactIDs(ids ...string) *PostCreate {
	pc.mutation.AddReactIDs(ids...)
	return pc
}

// AddReacts adds the "reacts" edges to the React entity.
func (pc *PostCreate) AddReacts(r ...*React) *PostCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddReactIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (pc *PostCreate) Mutation() *PostMutation {
	return pc.mutation
}

// Save creates the Post in the database.
func (pc *PostCreate) Save(ctx context.Context) (*Post, error) {
	var (
		err  error
		node *Post
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PostCreate) SaveX(ctx context.Context) *Post {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PostCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PostCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PostCreate) defaults() {
	if _, ok := pc.mutation.Pinned(); !ok {
		v := post.DefaultPinned
		pc.mutation.SetPinned(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PostCreate) check() error {
	if _, ok := pc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`model: missing required field "Post.body"`)}
	}
	if _, ok := pc.mutation.Short(); !ok {
		return &ValidationError{Name: "short", err: errors.New(`model: missing required field "Post.short"`)}
	}
	if _, ok := pc.mutation.First(); !ok {
		return &ValidationError{Name: "first", err: errors.New(`model: missing required field "Post.first"`)}
	}
	if _, ok := pc.mutation.Pinned(); !ok {
		return &ValidationError{Name: "pinned", err: errors.New(`model: missing required field "Post.pinned"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`model: missing required field "Post.createdAt"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`model: missing required field "Post.updatedAt"`)}
	}
	if _, ok := pc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`model: missing required field "Post.userId"`)}
	}
	return nil
}

func (pc *PostCreate) sqlSave(ctx context.Context) (*Post, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Post.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (pc *PostCreate) createSpec() (*Post, *sqlgraph.CreateSpec) {
	var (
		_node = &Post{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: post.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: post.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := pc.mutation.Slug(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldSlug,
		})
		_node.Slug = value
	}
	if value, ok := pc.mutation.Body(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldBody,
		})
		_node.Body = value
	}
	if value, ok := pc.mutation.Short(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldShort,
		})
		_node.Short = value
	}
	if value, ok := pc.mutation.First(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: post.FieldFirst,
		})
		_node.First = value
	}
	if value, ok := pc.mutation.Pinned(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: post.FieldPinned,
		})
		_node.Pinned = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.UserId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldUserId,
		})
		_node.UserId = value
	}
	if value, ok := pc.mutation.RootPostId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldRootPostId,
		})
		_node.RootPostId = value
	}
	if value, ok := pc.mutation.ReplyPostId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldReplyPostId,
		})
		_node.ReplyPostId = value
	}
	if value, ok := pc.mutation.CategoryId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldCategoryId,
		})
		_node.CategoryId = value
	}
	if nodes := pc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CategoryTable,
			Columns: []string{post.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.AuthorTable,
			Columns: []string{post.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.RootTable,
			Columns: []string{post.RootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.post_posts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostsTable,
			Columns: []string{post.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ReplyToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   post.ReplyToTable,
			Columns: post.ReplyToPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   post.RepliesTable,
			Columns: post.RepliesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.TagsTable,
			Columns: []string{post.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ReactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.ReactsTable,
			Columns: []string{post.ReactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: react.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Post.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PostCreate) OnConflict(opts ...sql.ConflictOption) *PostUpsertOne {
	pc.conflict = opts
	return &PostUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PostCreate) OnConflictColumns(columns ...string) *PostUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PostUpsertOne{
		create: pc,
	}
}

type (
	// PostUpsertOne is the builder for "upsert"-ing
	//  one Post node.
	PostUpsertOne struct {
		create *PostCreate
	}

	// PostUpsert is the "OnConflict" setter.
	PostUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *PostUpsert) SetTitle(v string) *PostUpsert {
	u.Set(post.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PostUpsert) UpdateTitle() *PostUpsert {
	u.SetExcluded(post.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *PostUpsert) ClearTitle() *PostUpsert {
	u.SetNull(post.FieldTitle)
	return u
}

// SetSlug sets the "slug" field.
func (u *PostUpsert) SetSlug(v string) *PostUpsert {
	u.Set(post.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostUpsert) UpdateSlug() *PostUpsert {
	u.SetExcluded(post.FieldSlug)
	return u
}

// ClearSlug clears the value of the "slug" field.
func (u *PostUpsert) ClearSlug() *PostUpsert {
	u.SetNull(post.FieldSlug)
	return u
}

// SetBody sets the "body" field.
func (u *PostUpsert) SetBody(v string) *PostUpsert {
	u.Set(post.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PostUpsert) UpdateBody() *PostUpsert {
	u.SetExcluded(post.FieldBody)
	return u
}

// SetShort sets the "short" field.
func (u *PostUpsert) SetShort(v string) *PostUpsert {
	u.Set(post.FieldShort, v)
	return u
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *PostUpsert) UpdateShort() *PostUpsert {
	u.SetExcluded(post.FieldShort)
	return u
}

// SetFirst sets the "first" field.
func (u *PostUpsert) SetFirst(v bool) *PostUpsert {
	u.Set(post.FieldFirst, v)
	return u
}

// UpdateFirst sets the "first" field to the value that was provided on create.
func (u *PostUpsert) UpdateFirst() *PostUpsert {
	u.SetExcluded(post.FieldFirst)
	return u
}

// SetPinned sets the "pinned" field.
func (u *PostUpsert) SetPinned(v bool) *PostUpsert {
	u.Set(post.FieldPinned, v)
	return u
}

// UpdatePinned sets the "pinned" field to the value that was provided on create.
func (u *PostUpsert) UpdatePinned() *PostUpsert {
	u.SetExcluded(post.FieldPinned)
	return u
}

// SetCreatedAt sets the "createdAt" field.
func (u *PostUpsert) SetCreatedAt(v time.Time) *PostUpsert {
	u.Set(post.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "createdAt" field to the value that was provided on create.
func (u *PostUpsert) UpdateCreatedAt() *PostUpsert {
	u.SetExcluded(post.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updatedAt" field.
func (u *PostUpsert) SetUpdatedAt(v time.Time) *PostUpsert {
	u.Set(post.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updatedAt" field to the value that was provided on create.
func (u *PostUpsert) UpdateUpdatedAt() *PostUpsert {
	u.SetExcluded(post.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deletedAt" field.
func (u *PostUpsert) SetDeletedAt(v time.Time) *PostUpsert {
	u.Set(post.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deletedAt" field to the value that was provided on create.
func (u *PostUpsert) UpdateDeletedAt() *PostUpsert {
	u.SetExcluded(post.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (u *PostUpsert) ClearDeletedAt() *PostUpsert {
	u.SetNull(post.FieldDeletedAt)
	return u
}

// SetUserId sets the "userId" field.
func (u *PostUpsert) SetUserId(v string) *PostUpsert {
	u.Set(post.FieldUserId, v)
	return u
}

// UpdateUserId sets the "userId" field to the value that was provided on create.
func (u *PostUpsert) UpdateUserId() *PostUpsert {
	u.SetExcluded(post.FieldUserId)
	return u
}

// SetRootPostId sets the "rootPostId" field.
func (u *PostUpsert) SetRootPostId(v string) *PostUpsert {
	u.Set(post.FieldRootPostId, v)
	return u
}

// UpdateRootPostId sets the "rootPostId" field to the value that was provided on create.
func (u *PostUpsert) UpdateRootPostId() *PostUpsert {
	u.SetExcluded(post.FieldRootPostId)
	return u
}

// ClearRootPostId clears the value of the "rootPostId" field.
func (u *PostUpsert) ClearRootPostId() *PostUpsert {
	u.SetNull(post.FieldRootPostId)
	return u
}

// SetReplyPostId sets the "replyPostId" field.
func (u *PostUpsert) SetReplyPostId(v string) *PostUpsert {
	u.Set(post.FieldReplyPostId, v)
	return u
}

// UpdateReplyPostId sets the "replyPostId" field to the value that was provided on create.
func (u *PostUpsert) UpdateReplyPostId() *PostUpsert {
	u.SetExcluded(post.FieldReplyPostId)
	return u
}

// ClearReplyPostId clears the value of the "replyPostId" field.
func (u *PostUpsert) ClearReplyPostId() *PostUpsert {
	u.SetNull(post.FieldReplyPostId)
	return u
}

// SetCategoryId sets the "categoryId" field.
func (u *PostUpsert) SetCategoryId(v string) *PostUpsert {
	u.Set(post.FieldCategoryId, v)
	return u
}

// UpdateCategoryId sets the "categoryId" field to the value that was provided on create.
func (u *PostUpsert) UpdateCategoryId() *PostUpsert {
	u.SetExcluded(post.FieldCategoryId)
	return u
}

// ClearCategoryId clears the value of the "categoryId" field.
func (u *PostUpsert) ClearCategoryId() *PostUpsert {
	u.SetNull(post.FieldCategoryId)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(post.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PostUpsertOne) UpdateNewValues() *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(post.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Post.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PostUpsertOne) Ignore() *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostUpsertOne) DoNothing() *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostCreate.OnConflict
// documentation for more info.
func (u *PostUpsertOne) Update(set func(*PostUpsert)) *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *PostUpsertOne) SetTitle(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateTitle() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *PostUpsertOne) ClearTitle() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearTitle()
	})
}

// SetSlug sets the "slug" field.
func (u *PostUpsertOne) SetSlug(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateSlug() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateSlug()
	})
}

// ClearSlug clears the value of the "slug" field.
func (u *PostUpsertOne) ClearSlug() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearSlug()
	})
}

// SetBody sets the "body" field.
func (u *PostUpsertOne) SetBody(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateBody() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateBody()
	})
}

// SetShort sets the "short" field.
func (u *PostUpsertOne) SetShort(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetShort(v)
	})
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateShort() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateShort()
	})
}

// SetFirst sets the "first" field.
func (u *PostUpsertOne) SetFirst(v bool) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetFirst(v)
	})
}

// UpdateFirst sets the "first" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateFirst() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateFirst()
	})
}

// SetPinned sets the "pinned" field.
func (u *PostUpsertOne) SetPinned(v bool) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetPinned(v)
	})
}

// UpdatePinned sets the "pinned" field to the value that was provided on create.
func (u *PostUpsertOne) UpdatePinned() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdatePinned()
	})
}

// SetCreatedAt sets the "createdAt" field.
func (u *PostUpsertOne) SetCreatedAt(v time.Time) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "createdAt" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateCreatedAt() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updatedAt" field.
func (u *PostUpsertOne) SetUpdatedAt(v time.Time) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updatedAt" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateUpdatedAt() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deletedAt" field.
func (u *PostUpsertOne) SetDeletedAt(v time.Time) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deletedAt" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateDeletedAt() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (u *PostUpsertOne) ClearDeletedAt() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserId sets the "userId" field.
func (u *PostUpsertOne) SetUserId(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetUserId(v)
	})
}

// UpdateUserId sets the "userId" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateUserId() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateUserId()
	})
}

// SetRootPostId sets the "rootPostId" field.
func (u *PostUpsertOne) SetRootPostId(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetRootPostId(v)
	})
}

// UpdateRootPostId sets the "rootPostId" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateRootPostId() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateRootPostId()
	})
}

// ClearRootPostId clears the value of the "rootPostId" field.
func (u *PostUpsertOne) ClearRootPostId() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearRootPostId()
	})
}

// SetReplyPostId sets the "replyPostId" field.
func (u *PostUpsertOne) SetReplyPostId(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetReplyPostId(v)
	})
}

// UpdateReplyPostId sets the "replyPostId" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateReplyPostId() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateReplyPostId()
	})
}

// ClearReplyPostId clears the value of the "replyPostId" field.
func (u *PostUpsertOne) ClearReplyPostId() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearReplyPostId()
	})
}

// SetCategoryId sets the "categoryId" field.
func (u *PostUpsertOne) SetCategoryId(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetCategoryId(v)
	})
}

// UpdateCategoryId sets the "categoryId" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateCategoryId() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateCategoryId()
	})
}

// ClearCategoryId clears the value of the "categoryId" field.
func (u *PostUpsertOne) ClearCategoryId() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearCategoryId()
	})
}

// Exec executes the query.
func (u *PostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for PostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PostUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: PostUpsertOne.ID is not supported by MySQL driver. Use PostUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PostUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PostCreateBulk is the builder for creating many Post entities in bulk.
type PostCreateBulk struct {
	config
	builders []*PostCreate
	conflict []sql.ConflictOption
}

// Save creates the Post entities in the database.
func (pcb *PostCreateBulk) Save(ctx context.Context) ([]*Post, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Post, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PostCreateBulk) SaveX(ctx context.Context) []*Post {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PostCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PostCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Post.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PostCreateBulk) OnConflict(opts ...sql.ConflictOption) *PostUpsertBulk {
	pcb.conflict = opts
	return &PostUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PostCreateBulk) OnConflictColumns(columns ...string) *PostUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PostUpsertBulk{
		create: pcb,
	}
}

// PostUpsertBulk is the builder for "upsert"-ing
// a bulk of Post nodes.
type PostUpsertBulk struct {
	create *PostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(post.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PostUpsertBulk) UpdateNewValues() *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(post.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PostUpsertBulk) Ignore() *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostUpsertBulk) DoNothing() *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostCreateBulk.OnConflict
// documentation for more info.
func (u *PostUpsertBulk) Update(set func(*PostUpsert)) *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *PostUpsertBulk) SetTitle(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateTitle() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *PostUpsertBulk) ClearTitle() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearTitle()
	})
}

// SetSlug sets the "slug" field.
func (u *PostUpsertBulk) SetSlug(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateSlug() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateSlug()
	})
}

// ClearSlug clears the value of the "slug" field.
func (u *PostUpsertBulk) ClearSlug() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearSlug()
	})
}

// SetBody sets the "body" field.
func (u *PostUpsertBulk) SetBody(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateBody() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateBody()
	})
}

// SetShort sets the "short" field.
func (u *PostUpsertBulk) SetShort(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetShort(v)
	})
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateShort() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateShort()
	})
}

// SetFirst sets the "first" field.
func (u *PostUpsertBulk) SetFirst(v bool) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetFirst(v)
	})
}

// UpdateFirst sets the "first" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateFirst() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateFirst()
	})
}

// SetPinned sets the "pinned" field.
func (u *PostUpsertBulk) SetPinned(v bool) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetPinned(v)
	})
}

// UpdatePinned sets the "pinned" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdatePinned() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdatePinned()
	})
}

// SetCreatedAt sets the "createdAt" field.
func (u *PostUpsertBulk) SetCreatedAt(v time.Time) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "createdAt" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateCreatedAt() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updatedAt" field.
func (u *PostUpsertBulk) SetUpdatedAt(v time.Time) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updatedAt" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateUpdatedAt() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deletedAt" field.
func (u *PostUpsertBulk) SetDeletedAt(v time.Time) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deletedAt" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateDeletedAt() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (u *PostUpsertBulk) ClearDeletedAt() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserId sets the "userId" field.
func (u *PostUpsertBulk) SetUserId(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetUserId(v)
	})
}

// UpdateUserId sets the "userId" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateUserId() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateUserId()
	})
}

// SetRootPostId sets the "rootPostId" field.
func (u *PostUpsertBulk) SetRootPostId(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetRootPostId(v)
	})
}

// UpdateRootPostId sets the "rootPostId" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateRootPostId() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateRootPostId()
	})
}

// ClearRootPostId clears the value of the "rootPostId" field.
func (u *PostUpsertBulk) ClearRootPostId() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearRootPostId()
	})
}

// SetReplyPostId sets the "replyPostId" field.
func (u *PostUpsertBulk) SetReplyPostId(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetReplyPostId(v)
	})
}

// UpdateReplyPostId sets the "replyPostId" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateReplyPostId() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateReplyPostId()
	})
}

// ClearReplyPostId clears the value of the "replyPostId" field.
func (u *PostUpsertBulk) ClearReplyPostId() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearReplyPostId()
	})
}

// SetCategoryId sets the "categoryId" field.
func (u *PostUpsertBulk) SetCategoryId(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetCategoryId(v)
	})
}

// UpdateCategoryId sets the "categoryId" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateCategoryId() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateCategoryId()
	})
}

// ClearCategoryId clears the value of the "categoryId" field.
func (u *PostUpsertBulk) ClearCategoryId() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearCategoryId()
	})
}

// Exec executes the query.
func (u *PostUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the PostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for PostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
