// Code generated by entc, DO NOT EDIT.

package subscription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/backend/internal/infrastructure/db/model/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RefersType applies equality check predicate on the "refers_type" field. It's identical to RefersTypeEQ.
func RefersType(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefersType), v))
	})
}

// RefersTo applies equality check predicate on the "refers_to" field. It's identical to RefersToEQ.
func RefersTo(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefersTo), v))
	})
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// RefersTypeEQ applies the EQ predicate on the "refers_type" field.
func RefersTypeEQ(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefersType), v))
	})
}

// RefersTypeNEQ applies the NEQ predicate on the "refers_type" field.
func RefersTypeNEQ(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefersType), v))
	})
}

// RefersTypeIn applies the In predicate on the "refers_type" field.
func RefersTypeIn(vs ...string) predicate.Subscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRefersType), v...))
	})
}

// RefersTypeNotIn applies the NotIn predicate on the "refers_type" field.
func RefersTypeNotIn(vs ...string) predicate.Subscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRefersType), v...))
	})
}

// RefersTypeGT applies the GT predicate on the "refers_type" field.
func RefersTypeGT(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefersType), v))
	})
}

// RefersTypeGTE applies the GTE predicate on the "refers_type" field.
func RefersTypeGTE(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefersType), v))
	})
}

// RefersTypeLT applies the LT predicate on the "refers_type" field.
func RefersTypeLT(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefersType), v))
	})
}

// RefersTypeLTE applies the LTE predicate on the "refers_type" field.
func RefersTypeLTE(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefersType), v))
	})
}

// RefersTypeContains applies the Contains predicate on the "refers_type" field.
func RefersTypeContains(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRefersType), v))
	})
}

// RefersTypeHasPrefix applies the HasPrefix predicate on the "refers_type" field.
func RefersTypeHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRefersType), v))
	})
}

// RefersTypeHasSuffix applies the HasSuffix predicate on the "refers_type" field.
func RefersTypeHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRefersType), v))
	})
}

// RefersTypeEqualFold applies the EqualFold predicate on the "refers_type" field.
func RefersTypeEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRefersType), v))
	})
}

// RefersTypeContainsFold applies the ContainsFold predicate on the "refers_type" field.
func RefersTypeContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRefersType), v))
	})
}

// RefersToEQ applies the EQ predicate on the "refers_to" field.
func RefersToEQ(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefersTo), v))
	})
}

// RefersToNEQ applies the NEQ predicate on the "refers_to" field.
func RefersToNEQ(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefersTo), v))
	})
}

// RefersToIn applies the In predicate on the "refers_to" field.
func RefersToIn(vs ...string) predicate.Subscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRefersTo), v...))
	})
}

// RefersToNotIn applies the NotIn predicate on the "refers_to" field.
func RefersToNotIn(vs ...string) predicate.Subscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRefersTo), v...))
	})
}

// RefersToGT applies the GT predicate on the "refers_to" field.
func RefersToGT(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefersTo), v))
	})
}

// RefersToGTE applies the GTE predicate on the "refers_to" field.
func RefersToGTE(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefersTo), v))
	})
}

// RefersToLT applies the LT predicate on the "refers_to" field.
func RefersToLT(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefersTo), v))
	})
}

// RefersToLTE applies the LTE predicate on the "refers_to" field.
func RefersToLTE(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefersTo), v))
	})
}

// RefersToContains applies the Contains predicate on the "refers_to" field.
func RefersToContains(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRefersTo), v))
	})
}

// RefersToHasPrefix applies the HasPrefix predicate on the "refers_to" field.
func RefersToHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRefersTo), v))
	})
}

// RefersToHasSuffix applies the HasSuffix predicate on the "refers_to" field.
func RefersToHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRefersTo), v))
	})
}

// RefersToEqualFold applies the EqualFold predicate on the "refers_to" field.
func RefersToEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRefersTo), v))
	})
}

// RefersToContainsFold applies the ContainsFold predicate on the "refers_to" field.
func RefersToContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRefersTo), v))
	})
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.Subscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.Subscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeleteTime)))
	})
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeleteTime)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Subscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Subscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Subscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Subscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotifications applies the HasEdge predicate on the "notifications" edge.
func HasNotifications() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NotificationsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.Notification) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NotificationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		p(s.Not())
	})
}
