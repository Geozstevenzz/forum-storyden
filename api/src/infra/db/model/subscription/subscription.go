// Code generated by entc, DO NOT EDIT.

package subscription

import (
	"fmt"
)

const (
	// Label holds the string label denoting the subscription type in the database.
	Label = "subscription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRefersType holds the string denoting the referstype field in the database.
	FieldRefersType = "refers_type"
	// FieldRefersTo holds the string denoting the refersto field in the database.
	FieldRefersTo = "refers_to"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeNotifications holds the string denoting the notifications edge name in mutations.
	EdgeNotifications = "notifications"
	// Table holds the table name of the subscription in the database.
	Table = "subscriptions"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "users"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "subscription_user"
	// NotificationsTable is the table that holds the notifications relation/edge.
	NotificationsTable = "notifications"
	// NotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationsInverseTable = "notifications"
	// NotificationsColumn is the table column denoting the notifications relation/edge.
	NotificationsColumn = "subscription_notifications"
)

// Columns holds all SQL columns for subscription fields.
var Columns = []string{
	FieldID,
	FieldRefersType,
	FieldRefersTo,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldUserId,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "subscriptions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"notification_subscription",
	"user_subscriptions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// RefersType defines the type for the "refersType" enum field.
type RefersType string

// RefersType values.
const (
	RefersTypeFORUM_POST_RESPONSE RefersType = "FORUM_POST_RESPONSE"
)

func (rt RefersType) String() string {
	return string(rt)
}

// RefersTypeValidator is a validator for the "refersType" field enum values. It is called by the builders before save.
func RefersTypeValidator(rt RefersType) error {
	switch rt {
	case RefersTypeFORUM_POST_RESPONSE:
		return nil
	default:
		return fmt.Errorf("subscription: invalid enum value for refersType field: %q", rt)
	}
}
