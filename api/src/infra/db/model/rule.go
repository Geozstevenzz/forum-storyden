// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Southclaws/storyden/api/src/infra/db/model/rule"
)

// Rule is the model entity for the Rule schema.
type Rule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// ServerId holds the value of the "serverId" field.
	ServerId string `json:"serverId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RuleQuery when eager-loading is set.
	Edges     RuleEdges `json:"edges"`
	server_ru *string
}

// RuleEdges holds the relations/edges for other nodes in the graph.
type RuleEdges struct {
	// Server holds the value of the Server edge.
	Server []*Server `json:"Server,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServerOrErr returns the Server value or an error if the edge
// was not loaded in eager-loading.
func (e RuleEdges) ServerOrErr() ([]*Server, error) {
	if e.loadedTypes[0] {
		return e.Server, nil
	}
	return nil, &NotLoadedError{edge: "Server"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rule) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case rule.FieldID:
			values[i] = new(sql.NullInt64)
		case rule.FieldName, rule.FieldValue, rule.FieldServerId:
			values[i] = new(sql.NullString)
		case rule.ForeignKeys[0]: // server_ru
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Rule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rule fields.
func (r *Rule) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case rule.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case rule.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				r.Value = value.String
			}
		case rule.FieldServerId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serverId", values[i])
			} else if value.Valid {
				r.ServerId = value.String
			}
		case rule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server_ru", values[i])
			} else if value.Valid {
				r.server_ru = new(string)
				*r.server_ru = value.String
			}
		}
	}
	return nil
}

// QueryServer queries the "Server" edge of the Rule entity.
func (r *Rule) QueryServer() *ServerQuery {
	return (&RuleClient{config: r.config}).QueryServer(r)
}

// Update returns a builder for updating this Rule.
// Note that you need to call Rule.Unwrap() before calling this method if this Rule
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rule) Update() *RuleUpdateOne {
	return (&RuleClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Rule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rule) Unwrap() *Rule {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("model: Rule is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rule) String() string {
	var builder strings.Builder
	builder.WriteString("Rule(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteString(", value=")
	builder.WriteString(r.Value)
	builder.WriteString(", serverId=")
	builder.WriteString(r.ServerId)
	builder.WriteByte(')')
	return builder.String()
}

// Rules is a parsable slice of Rule.
type Rules []*Rule

func (r Rules) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
